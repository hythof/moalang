# Entry point
main : io(int)
main =
  src <- io.stdin.string
  ret <- run(src)
  io.write(ret)
  0

run : string try(string)
run src =
  defs <- parse_top(src)
  eval(defs)

# data types
ast enum:
  int i64
  ref string
  op2 op string, left ast, right ast

def struct:
  name string
  body ast

# parser
parser flow:
  src string
  pos mutable(i64)

satisfy : (string bool) parser(string)
satisfy f =
  p = parser
  c <- p.src(p.pos)
  f(c)
  | false = miss("char: $c, func: $f.name, pos: $p.pos")
  p.pos += 1
  c
manny1 a : parser(a) parser[a]
many1 f = f() ++ many(f)
manny a : parser(a) parser[a]
many f = rec([])
with:
  rec acc = v <- f()
  | error = acc
  | rec(acc ++ v)
parse_top : parser[def]
parse_top = many1(parse_def)
parse_def : parser(def)
parse_def =
  id <- read_id
  string "="
  body <- parse_exp
  def(id body)
parse_exp : parser(ast)
parse_exp =
  l <- parse_unit
  op <- read_op
  r <- parse_exp
  ast.op2(op l r)
parse_unit : parser(ast)
parse_unit = parse_int ||| parse_ref
parse_int : parser(ast)
parse_int =
  x <- many1(p.satisfy(range("0" "9").contains))
  ast.int(x.to_int)
read_id : parser(string)
read_op = one(["+" "-" "*" "/"].contains)

# evaluator
eval : [def] try(ast)
eval env =
  main <- env.find("main")
  apply(main).to_string
with:
  apply node = node
  | ast.int = node
  | ast.op2 = operate(node.op node.left node.rigth)
  | ast.ref =
    v <- env.find(node)
    apply(v)
operate op left right = op
| "+" = l + r
| "-" = l - r
| "*" = l * r
| "/" = l / r
| error("unknown operator $op")
with:
  l = apply(left)
  r = apply(right)
