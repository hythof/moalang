main: io(int)
main =
  src <- io.stdin.string
  ret <- run(src)
  io.write(ret)
  return(0)

run: string try(string)
run src = eval(parser(src).parse_top)

ast:
| int value int
| op2 op string, left ast, right ast

parser:
  src string
  pos 0
  satisfy: (string bool) try(string)
  satisfy f =
    c <- src(pos)
    f(c) || throw("char: $c, checker: $f.name, pos: $p.pos")
    p.pos += 1
    return(c)
  parse_top: try(ast)
  parse_top = many1(parse_def)
  parse_def: try(ast)
  parse_def =
    id <- read_id
    read_string("=")
    body <- parse_exp
    def(id body)
  parse_exp: try(ast)
  parse_exp =
    l <- parse_unit
    op <- read_op
    r <- parse_exp
    ast.op2(op l r)
  parse_unit: try(ast)
  parse_unit = parse_int | parse_ref
  parse_int: try(ast)
  parse_int =
    x <- many1(p.satisfy(range("0" "9").contains))
    ast.int(x.to_int)
  read_id: try(string)
  read_op = one(["+" "-" "*" "/"].contains)
  read_string s = s == src.slice(pos s.length)

many1 a: try(a) try([]a)
many1 f = f() ++ many(f)
many a: try(a) try([]a)
many f = rec([]):
  rec acc =
    v <- f()
    | _ = return acc
    rec(acc ++ v)

# evaluator
eval: ast try(ast)
eval env =
  main <- env.find("main")
  apply(main).to_string
apply: ast try(ast)
apply node = node
| ast.int = node
| ast.op2 = operate(node.op node.left node.rigth)
| ast.ref =
  v <- env.find(node)
  apply(v)
extract_int x = i <- apply(x)
| ast.int = i.value
operate: string ast ast try(ast)
operate op left right =
  l <- apply(left).extract_int
  r <- apply(right).extract_int
  op
  | "+" = ast.int(l + r)
  | "-" = ast.int(l - r)
  | "*" = ast.int(l * r)
  | "/" = ast.int(l / r)
  | err("unknown operator $op")
