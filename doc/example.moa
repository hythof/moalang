# Entry point
main : io seq(int)
main io =
  src <- io.stdin.string
  ret <- run(src)
  io.write(ret)
  0

run : string seq(string)
run src =
  defs <- parse_top(src)
  eval(defs)

# data types
ast:
| int value int
| ref name string
| op2 op string, left ast, right ast
| def name string, body ast
| seq lines [ast]

# parser
parser:
  src string
  pos 0
  satisfy : func(string bool) string
  satisfy f =
    p = parser
    c <- p.src(p.pos)
    f(c)
    | false = miss("char: $c, func: $f.name, pos: $p.pos")
    p.pos += 1
    c
  parse_top : ast
  parse_top = many1(parse_def)
  parse_def : ast
  parse_def =
    id <- read_id
    read_string("=")
    body <- parse_exp
    def(id body)
  parse_exp : ast
  parse_exp =
    l <- parse_unit
    op <- read_op
    r <- parse_exp
    ast.op2(op l r)
  parse_unit : ast
  parse_unit = parse_int
  | parse_ref
  parse_int : ast
  parse_int =
    x <- many1(p.satisfy(range("0" "9").contains))
    ast.int(x.to_int)
  read_id : string
  read_op = one(["+" "-" "*" "/"].contains)
  read_string s = s == src.slice(pos s.length)

many1 a : seq(a) seq([a])
many1 f = f() ++ many(f)
many a : seq(a) seq([a])
many f =
  rec acc = v <- f()
  | error = acc
  | rec(acc ++ v)
  rec([])

# evaluator
eval : ast seq(ast)
eval env =
  main <- env.find("main")
  apply(main).to_string
apply : ast seq(ast)
apply node = node
| ast.int = node
| ast.op2 = operate(node.op node.left node.rigth)
| ast.ref =
  v <- env.find(node)
  apply(v)
extract_int x = i <- apply(x)
| ast.int = i.value
operate : string ast ast seq(ast)
operate op left right =
  l <- apply(left).extract_int
  r <- apply(right).extract_int
  op
  | "+" = ast.int(l + r)
  | "-" = ast.int(l - r)
  | "*" = ast.int(l * r)
  | "/" = ast.int(l / r)
  | err("unknown operator $op")
