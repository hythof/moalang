ast:
| int val int
| string val int
| bool val int
| parenthesis val ast
| array val array(ast)
| method_ target ast, id string, argv array(ast)

parse src = parse_exp:
  pos int
  parse_exp = go_exp:
    go_exp =
      spaces
      b <- go_body
      go_remain(b)
    go_body = parse_array.or(parse_parenthesis).or(parse_string).or(parse_int).or(parse_bool).or(fail("parse_exp"))
    go_remain b = go_ref(b).or(b)
    go_ref b =
      eq(".")
      id <- read_id
      args <- between("(" ")" many(parse_exp)).or([])
      method_(b id args)
  parse_array =
    v <- between("[" "]" many_(parse_exp))
    array(v)
  parse_parenthesis =
    v <- between("(" ")" parse_exp)
    parenthesis(v)
  parse_string =
    v <- between(`"` `"` many_(satisfy((x => x != `"`)))).or(between("`" "`" many(satisfy((x => x != "`")))))
    string(v.join)
  parse_int =
    v <- many1(satisfy((x => "-0123456789".has(x))))
    int(v.join.to_i)
  parse_bool =
    v <- eq("true").or(eq("false"))
    bool((v == "true"))
  read_id =
    id <- many1(satisfy((x => "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_".has(x))))
    id.join
  spaces = many(satisfy((x => x == " ")))
  many1 f =
    x <- f
    xs <- many(f)
    [x] ++ xs
  many f = many_acc.or(acc):
    acc array
    many_acc =
      x <- f
      acc.push(x)
      many_acc
  many_ f = _many_acc.or(acc):
    acc array
    _many_acc =
      x <- f
      acc.push(x)
      _many_acc
  between l r c =
    eq(l)
    v <- c
    eq(r)
    v
  satisfy f =
    (pos < src.length) || err("eof")
    c = src.slice(pos 1)
    f(c)
    | true -> forward(c)
    | false -> err(("not satisfy " ++ c ++ " " ++ f.to_s))
  eq s = (src.slice(pos s.length) == s)
  | true -> forward(s)
  | false -> err(("not eq " ++ s))
  forward s =
    pos += s.length
    s
  fail title = err(("Failed to parse on " ++ title ++ " pos=" ++ pos.to_s))

build node = node
| int -> node.val.to_s
| string -> `"` ++ node.val ++ `"`
| bool -> node.val
| parenthesis -> "(" ++ build(node.val) ++ ")"
| array -> "[" ++ node.val.map((x => build(x))).join(", ") ++ "]"
| method_ -> build(node.target) ++ "." ++ node.id ++ "(" ++ node.argv.map((x => build(x))).join(", ") ++ ")"

compile src =
  tree <- parse(src)
  build(tree)
