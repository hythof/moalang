matcher|
  type_matcher type string, body ast
  value_matcher value ast, body ast
ast|
  int val int
  string val int
  bool val int
  parenthesis val ast
  array val array(ast)
  ref name string
  call target ast, argv array(ast)
  method_ target ast, id string, argv array(ast)
  struct name string, args array(string)
  enum name string, elements array(array(string))
  func name string, args array(string), body ast
  op2 op string, left ast, right ast
  branch target ast, matchers array(matcher)
  stmt lines array(ast)

parse src = parse_defines:
  pos int
  indent int
  spaces = many(satisfy((x => x == " ")))
  brs = many(satisfy((x => x == "\n")))
  many1 f =
    x <- f
    xs <- many(f)
    [x] ++ xs
  many f = many_acc.or(acc):
    acc array
    many_acc =
      x <- f
      acc.push(x)
      many_acc
  sep_by f g = sep_by_acc.or(acc):
    acc array
    sep_by_acc =
      v <- f
      acc.push(v)
      g
      sep_by_acc
  between l r c =
    eq(l)
    v <- c.or(die(("center in between left=" ++ l)))
    eq(r).or(die(("right in between left=" ++ l)))
    v
  satisfy f =
    (pos < src.count) || err("eof")
    c = src.slice(pos 1)
    f(c)
    | true -> forward(c)
    | false -> fail(("not satisfy '" ++ c ++ "' " ++ f.to_s))
  eq s = (src.slice(pos s.count) == s)
  | true -> forward(s)
  | false -> err(("not eq " ++ s.inspect))
  any xs =
    x <- xs.find((x => (src.slice(pos x.count) == x)))
    forward(x)
  see s = (src.slice(pos s.count) == s)
  forward s =
    pos += s.count
    s
  fail title = err(("Failed to parse on " ++ title ++ " pos=" ++ pos.to_s))
  die title = panic(("Fatal to parse on " ++ title ++ " pos=" ++ pos.to_s))
  read_id =
    id <- many1(satisfy((x => "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_".has(x))))
    id.join
  read_arg =
    spaces
    read_type
  read_type = go_type:
    go_type =
      spaces
      id <- read_id
      go_type_remain(id).or(id)
    go_type_remain id =
      args <- between("(" ")" many(go_type))
      args.count == 0
      | true -> id
      | false -> id ++ "(" ++ args.join(" ") ++ ")"
  parse_defines = go_defines:
    go_defines =
      defs <- many1(parse_define)
      src.count == pos
      | true -> defs
      | false -> die("define")
  parse_define = go_define:
    go_define =
      brs
      read_indent(0)
      id <- read_id
      spaces
      args <- many(read_arg)
      satisfy((c => "|=:\n".has(c)))
      | "|" -> go_enum(id)
      | ":" -> go_struct(id)
      | "\n" -> go_var(id args.first)
      | "=" -> remain_func(id args)
      | _ -> fail(("invalid define " ++ id))
    go_var id type = op2("=" ref(id) go_var_init(type))
    go_var_init type = type
    | "int" -> int(0)
    | "string" -> string("")
    | "bool" -> bool(false)
    | "array(int)" -> array([])
    | "array(string)" -> array([])
    | "array(bool)" -> array([])
    go_struct id =
      args <- many1(go_field).or(die(("struct " ++ id)))
      struct(id args)
    go_field =
      eq("\n  ")
      spaces
      id <- read_id
      eq(" ")
      read_type
      id
    go_enum id =
      elements <- many1(go_element).or(die(("enum " ++ id)))
      enum(id elements)
    go_element =
      eq("\n  ")
      id <- read_id
      args <- sep_by(go_element_kv eq(","))
      [id] ++ args
    go_element_kv =
      spaces
      id <- read_id
      spaces
      read_type
      id
  parse_stmt =
    lines <- many1(parse_line)
    stmt(lines)
  parse_line =
    eq("\n")
    read_indent(1)
    parse_exp
  parse_body =
    exp <- parse_exp
    remain_body(exp).or(exp)
  parse_exp = go_exp:
    go_exp =
      spaces
      body <- go_body
      remain_exp(body)
    go_body = parse_array.or(parse_parenthesis).or(parse_string).or(parse_int).or(parse_bool).or(parse_call).or(fail("parse_exp"))
  parse_array =
    v <- between("[" "]" many(parse_exp))
    array(v)
  parse_parenthesis =
    v <- between("(" ")" parse_exp)
    parenthesis(v)
  parse_string =
    v <- between(`"` `"` many(satisfy((x => x != `"`)))).or(between("`" "`" many(satisfy((x => x != "`")))))
    string(v.join)
  parse_int =
    v <- many1(satisfy((x => "-0123456789".has(x))))
    int(v.join.to_i)
  parse_bool =
    v <- eq("true").or(eq("false"))
    bool((v == "true"))
  parse_call = go_call:
    go_call =
      id <- read_id
      args <- between("(" ")" many(parse_exp)).or([])
      (args.count == 0)
      | true -> go_lambda(id).or(remain_exp(ref(id)))
      | false -> go_lambda(id).or(remain_exp(call(ref(id) args)))
    go_lambda id =
      eq(" => ")
      exp <- parse_exp
      func("lambda" [id] exp)
    go_func id =
      eq(" = ")
      remain_func(id [])
  read_matcher =
    indent
    | 0 -> eq("\n| ")
    | 1 -> eq("\n  | ")
    | 2 -> eq("\n    | ")
    | 3 -> eq("\n      | ")
    read_type_matcher.or(read_value_matcher)
  read_type_matcher =
    id <- read_id
    eq(" -> ")
    exp <- parse_exp
    type_matcher(id exp)
  read_value_matcher =
    val <- parse_exp
    eq(" -> ")
    exp <- parse_exp
    value_matcher(val exp)
  remain_body exp =
    matchers <- many1(read_matcher)
    branch(exp matchers)
  read_indent n = indent + n
  | 0 -> ""
  | 1 -> eq("  ")
  | 2 -> eq("    ")
  | 3 -> eq("      ")
  remain_exp top = remain_ref(top).or(remain_call(top)).or(remain_op2(top)).or(top):
    remain_ref target =
      eq(".")
      id <- read_id
      args <- between("(" ")" many(parse_exp)).or([])
      m = method_(target id args)
      remain_ref(m).or(m)
    remain_call target =
      args <- between("(" ")" many(parse_exp))
      m = call(target args)
      remain_ref(m).or(m)
    remain_op2 left =
      spaces
      op <- any(all_ops)
      spaces
      right <- parse_exp
      o = op2(op left right)
      remain_op2(o).or(o)
  remain_func id args =
    spaces
    body <- parse_stmt.or(parse_body).or(die(("func " ++ id)))
    body2 <- remain_private(body).or(body)
    func(id args body2)
  remain_private x =
    eq(":")
    add_indent
    xs <- many1(parse_define).or(die("private"))
    sub_indent
    stmt((xs ++ [x]))
  add_indent =
    indent += 1
  sub_indent =
    indent -= 1
  back n =
    pos -= n

all_ops = ["||" ">=" "==" "<=" "<-" ":=" "/=" "-=" "+=" "++" "*=" "&&" "%=" "!=" ">" "<" "/" "-" "+" "*" "%" "="]

build_call id argv = (argv.size == 0)
| true -> "__pure(" ++ id ++ ")"
| false -> id ++ "(" ++ argv.map((x => build(x))).join(", ") ++ ")"
build_element element = element.first ++ " = " ++ build_element_value(element)
build_element_value element = (element.size == 1)
| true -> "{__tag: '" ++ element.first ++ "'}"
| false -> "(" ++ element.slice(1 element.count) ++ ") => { return { __tag:" ++ element.first ++ ", " ++ element.slice(1 element.count).join(", ") ++ "} }"
build_branch target matchers = "(() => {\n" ++ matchers.map((x => exit_if_match(target x))).join("\n") ++ "\nthrow new Error('branch bug')})()"
exit_if_match target x = "if (" ++ branch_match(target x) ++ ") { return " ++ build(x.body) ++ " }"
branch_match target x = x
| type_matcher -> branch_match_matcher(target x)
| type_value -> build(target) ++ " === " ++ build(x.value)
branch_match_matcher target x = x.type
| "ok" -> "!" ++ build(target) ++ ".__err"
| "err" -> build(target) ++ ".__err"
| "true" -> build(target) ++ " === true"
| "false" -> build(target) ++ " === false"
| _ -> build(target) ++ ".__tag == '" ++ x.type ++ "'"
build_op op l r = op
| "++" -> build(l) ++ " + " ++ build(r)
| "=" -> l.name ++ " = " ++ build(r)
| "+=" -> l.name ++ " += " ++ build(r)
| "-=" -> l.name ++ " -= " ++ build(r)
| "*=" -> l.name ++ " *= " ++ build(r)
| "/=" -> l.name ++ " /= " ++ build(r)
| "%=" -> l.name ++ " %= " ++ build(r)
| "<-" -> l.name ++ " = __effect(" ++ build(r) ++ ")"
| _ -> build(l) ++ " " ++ op ++ " " ++ build(r)
build_stmt_line node = node
| ref -> "__effect(" ++ node.name ++ ")"
| _ -> build(node)
build node = node
| int -> node.val.to_s
| string -> `"` ++ node.val ++ `"`
| bool -> node.val.to_s
| parenthesis -> "(" ++ build(node.val) ++ ")"
| array -> "[" ++ node.val.map((x => build(x))).join(", ") ++ "]"
| ref -> "__pure(" ++ node.name ++ ")"
| call -> build_call(build(node.target) node.argv)
| method_ -> build_call((build(node.target) ++ "." ++ node.id) node.argv)
| struct -> node.name ++ " = (" ++ node.args.join(",") ++ ") => { return {" ++ node.args.join(",") ++ "} }"
| enum -> node.elements.map((x => build_element(x))).join(",\n")
| func -> node.name ++ " = (" ++ node.args.join(",") ++ ") => { return " ++ build(node.body).to_s ++ "}"
| op2 -> build_op(node.op node.left node.right)
| branch -> build_branch(node.target node.matchers)
| stmt -> "(() => {let __f; __f = () => { let __r\n" ++ node.lines.map((x => "__r = " ++ build_stmt_line(x) ++ "; if (__r.__err) { return __r }\n")).join() ++ "return __r}; __f.__stmt = true; return __f})()"
compile src =
  defs <- parse(src)
  "(" ++ defs.map((x => build(x))).join(",\n") ++ ")()"

main =
  moa <- io.stdin.string
  defs <- parse(moa)
  js <- defs.map((x => build(x))).join("\n")
  io.stdout(js)
