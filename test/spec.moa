# ---( primitive )---------------------------------------------------
assert true true
assert false false
assert 1 1
assert 1.1 1.1
assert "a" "a"
assert bytes() bytes()
assert fn() fn()
assert stream() stream()
assert i8(1) i8(1)
assert i16(1) i16(1)
assert i32(1) i32(1)
assert i64(1) i64(1)
assert u8(1) u8(1)
assert u16(1) u16(1)
assert u32(1) u32(1)
assert u64(1) u64(1)
assert f32(1) f32(1)
assert f64(1) f64(1)



# ---( container )---------------------------------------------------
assert none none
assert some(1) some(1)
assert class() class()
assert tuple() tuple()
assert list() list()
assert dict() dict()
assert set() set()



# ---( declare )----------------------------------------------
assert 1: let a 1; a
assert 2: var a 1; a = 2; a
assert 1: def f 1; f()
assert 1: def f a a; f(1)
assert 2: def f a b b; f(1 2)
assert 1:
  class a: b int
  a(1).b
assert "b":
  enum a: b
  string(b)
assert "b(1)":
  enum a: b int
  string(b(1))
assert "b(1 2)":
  enum a: b: c int; d int
  string(b(1 2))



# ---( operators )---------------------------------------------------
# bool
assert true !false
assert true  true  || true
assert true  true  && true

# int
assert 3 1 +  2
assert 1 3 -  2
assert 6 2 *  3
assert 2 4 /  2
assert 1 5 %  2
assert 3 1 |  2
assert 2 3 &  2
assert 1 3 ^  2
assert 8 2 ** 3
assert true  1 == 1
assert false 1 != 1
assert false 1 >  1
assert true  1 >= 1
assert false 1 <  1
assert true  1 <= 1
assert 2: var a 1; a +=  1; a
assert 1: var a 3; a -=  2; a
assert 6: var a 2; a *=  3; a
assert 2: var a 4; a /=  2; a
assert 1: var a 5; a %=  2; a
assert 3: var a 1; a |=  2; a
assert 2: var a 3; a &=  2; a
assert 1: var a 3; a ^=  2; a
assert 8: var a 2; a **= 3; a

# float
assert 3.0 1.0 +  2
assert 1.0 3.0 -  2
assert 6.0 2.0 *  3
assert 2.5 5.0 /  2
assert 1.0 5.0 %  2
assert 3.0 1.0 |  2
assert 2.0 3.0 &  2
assert 1.0 3.0 ^  2
assert 8.0 2.0 ** 3
assert true  1.0 == 1.0
assert false 1.0 != 1.0
assert false 1.0 >  1.0
assert true  1.0 >= 1.0
assert false 1.0 <  1.0
assert true  1.0 <= 1.0
assert 2.0: var a 1.0; a +=  1; a
assert 1.0: var a 3.0; a -=  2; a
assert 6.0: var a 2.0; a *=  3; a
assert 2.0: var a 4.0; a /=  2; a
assert 1.0: var a 5.0; a %=  2; a
assert 3.0: var a 1.0; a |=  2; a
assert 2.0: var a 3.0; a &=  2; a
assert 1.0: var a 3.0; a ^=  2; a
assert 8.0: var a 2.0; a **= 3; a

# string
assert "ab" "a" ++ "b"

# bytes
assert bytes("ab") bytes("a") ++ bytes("b")

# function
assert 1 fn(1)()
assert 1 fn(a a)(1)
assert 3 fn(a b a + b)(1 2)

# stream (no operator)

# opt
assert none    none    || none
assert some(1) some(1) || none
assert some(1) none    || some(1)

# list
assert [1 2] [1] ++ [2]
assert 1 [1][0]
assert [2]: var a [1]; a[0] = 2; a

# class
assert 1 class(a 1).a
assert 2 class(a 1 b 2).b
assert 2: class a: b int; var c a(1); c.b = 2; c.b

# set
assert set(1)   set(1 2) - set(2)
assert set(1 2) set(1)   | set(2)
assert set(2)   set(1 2) & set(2)
assert set(1)   set(1 2) ^ set(2)

# dict
assert dict(1 2 3 4) dict(1 2) ++ dict(3 4)



# ---( branch )------------------------------------------------------
# iif
assert 1: iif true 1 [][0]
assert 2: iif false [][0] 2
assert 2: iif false [][0] true 2 [][0]
assert 3: iif false [][0] false [][0] 3

# if / else
assert 3: var a 1; if true : a += 2; a
assert 1: var a 1; if false: a += 2; a
assert 4: var a 1; if true : a += 2; else: a += 3; a
assert 1: var a 1; if false: a += 2; else: a += 3; a

# switch
assert 10:
  enum a:
    b
    c int
    d:
      e int
      f int
  def g x:
    switch x:
      b: 1
      c v: v
      d v: v.e + v.f
  g(b) + g(c(2)) + g(d(3 4))

# short circuit evaluation
assert false false && [][0]
assert true  true || [][0]



# ---( flow )--------------------------------------------------------
# semiclon
assert 2 (1; 2)

# return
assert 1: if true : return 1
assert 2:
  if false:
    return 1
  2

# for
assert 3: var a 1; for 2 b => a += b; a

# while
assert 3: var a 1; while a < 3: a += 1; a

# continue
assert 3: var a 1; for 3 _ => continue;
# TODO: break

# throw / catch
assert "a" catch(throw("a") fn(e e.message))



# ---( methods )-----------------------------------------------------
# number
assert 1 (-1).abs
assert 1 (-1).neg
assert (-1) 1.neg
assert "A" 65.char
assert 1 1.9.floor
assert 2 1.1.ceil
assert 1 1.4.round
assert 2 1.5.round

# string
assert 2       "ab".size
assert "ba"    "ab".reverse
assert "ba"    "aba".slice(1)
assert "b"     "aba".slice(1 2)
assert "_b_"   "aba".replace("a" "_")
assert some(1) "ab".index("b")
assert none    "ab".index("c")
assert true    "ab".starts("a")
assert false   "ab".starts("b")
assert true    "\\"".starts("\\"")
assert false   "ab".ends("a")
assert true    "ab".ends("b")
assert "ab"    "\t\r\n ab \t\r\n".trim

# TODO: bytes

# regexp
assert true      regexp("^\\d+$").match("123")
assert false     regexp("^\\d+$").match("1.2")
assert ["1" "2"] regexp("\\d").capture("1.2")
assert []        regexp("a").capture("1.2")
assert ["a" "b"] regexp("\\d").split("a1b")
assert "1!2!"    regexp("\\d").replace("12" fn(x x ++ "!"))

# TODO: fn
# TODO: stream

# time
assert 2024 time(2024  1 2 3 4 5 6).year
assert    1 time(2024  1 2 3 4 5 6).month
assert    2 time(2024  1 2 3 4 5 6).day
assert    3 time(2024  1 2 3 4 5 6).hour
assert    4 time(2024  1 2 3 4 5 6).min
assert    5 time(2024  1 2 3 4 5 6).sec
assert    6 time(2024  1 2 3 4 5 6).offset
assert    2 time(2024  1 2 3 4 5 6).wday
assert  337 time(2024 12 2 3 4 5 6).yday
assert "2024-01-02T03:04:05Z"     time(2024 1 2 3 4 5 0).string
assert "2024-01-02T04:05:06Z"     time(2024 1 2 3 4 5 0).tick(3661).string
assert "2024/1/2 3:4:5 -0006"     time(2024 1 2 3 4 5 (-6)).format("yyyy/m/d H:M:S z")
assert "2024/01/02 03:04:05+0006" time(2024 1 2 3 4 5 6).format("yyyy/mm/dd HH:MM:SSz")
assert "2024/01/02 03:03:59+0000" time(2024 1 2 3 4 5 6).utc.format("yyyy/mm/dd HH:MM:SSz")

# option
assert some(3) some(1).and(fn(a (+ a 2)))
assert 1 some(1).or(2)
assert 2 none.or(2)
assert true some(0).bool
assert false none.bool

# class (no methods)

# tuple
assert 1   tuple(1 "a").0
assert "a" tuple(1 "a").1

# list
assert 1 [1].at(0)
assert 1 [1].at((-1))
assert 2 [1 2].at((-1))
assert 2 [1].tie(0 2)
assert [2]: var a [1]; a.tie 0 2; a
assert [1]: var a []; a.push 1; a
assert some(1)          [1].get(0)
assert none             [1].get(1)
assert 1                [1].size
assert [2 1]            [1 2].reverse
assert [2]              [1 2].slice(1)
assert [1]              [1 2].slice(0 1)
assert [2]              [1].map(fn(a a + 1))
assert [1 3]            [1 2].mapi(fn(a i a + i))
assert [1 2]            [1].fmap(fn(a [a] a + 1))
assert [1]              [1 2].keep(fn(a a == 1))
assert false            [1 2].all(fn(a a < 2))
assert true             [1 2].any(fn(a a < 2))
assert [1 2]            [2 1].sort()
assert [1 2]            [1 2].sort(fn(a b a > b))
assert [tuple(1 2)]     [1].zip([2])
assert 3                [1 2].fold(0 fn(a b (+ a b)))
assert some(1)          [1].find(fn(a a == 1))
assert none             [1].find(fn(a a == 2))
assert some(0)          [1].index(fn(a a == 1))
assert none             [1].index(fn(a a == 2))
assert "a,b"            ["a" "b"].join(",")
assert true             [1].has(1)
assert 1                [1 2].min
assert 2                [1 2].max

# set
assert 1     set(1).size
assert true  set(1).has(1)
assert false set(1).add(1)
assert true  set(1).add(2)
assert true  set(1).rid(1)
assert false set(1).rid(2)

# dict
assert some(2)      dict(1 2).get(1)
assert none         dict(1 2).get(2)
assert 1            dict(1 2).size
assert true         dict(1 2).has(1)
assert 2            dict().set(1 2)
assert [1]          dict(1 2).keys
assert [2]          dict(1 2).values
assert [tuple(1 2)] dict(1 2).list



# ---( type annotation )----------------------------------------------
assert "bool":
  dec symbol bool
  string symbol

assert "fn[int int]":
  dec symbol int int
  string symbol

assert "type[argument]":
  dec symbol type[0]
  string symbol

assert "type[int]":
  dec symbol type[0]
  string symbol[int]

assert "fn[... int]":
  dec symbol ... int
  string symbol

assert "a fn[...a a]":
  dec symbol[a] ...a a
  string symbol

assert "a b fn[...[a b] tuple[a b]]":
  dec symbol[a b] ...[a b] tuple[a b]
  string symbol

assert "class[field int]":
  dec symbol:
    field int
  string symbol

assert "a class[field a]":
  dec symbol[a]:
    field a
  string symbol

assert "a class[field int]":
  dec symbol[a]:
    field a
  string symbol[int]

assert "class[...]":
  dec symbol[...]:
    $ a.mapi t,i => puts(i t.name)
  string symbol

assert "class[0 int 1 bool]":
  dec symbol[...]:
    $ a.mapi t,i => puts(i t.name)
  string symbol[int bool]

assert "class[a int b int]":
  dec symbol:
    (a b) int
  string symbol

assert "class[f fn[int int]]":
  dec symbol:
    f int int
  string symbol

assert "class[a class[b int c fn[bool bool]]]":
  dec symbol:
    a:
      b int
      c bool bool
  string symbol



# ---( reserved )----------------------------------------------------
#reserved : num ref time duration decimal array use module
