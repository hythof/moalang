# ---( literal )---------------------------------------------------
assert true true
assert false false
assert 1 1
assert 1.1 1.1
assert "a" "a"
assert " \" " """ " """
assert   1000     1e3
assert    255    0xff
assert    255    0xFF
assert      9    0o11
assert      7   0b111
assert  10000  10_000
assert 0.1002 0.1_002


# ---( operator and method )---------------------------------------------------
# bool
assert true !false
assert true true || true
assert true true && true

# int
assert (-2) (~1)
assert 3 1 + 2
assert 1 3 - 2
assert 6 2 * 3
assert 2 4 / 2
assert 1 5 % 2
assert 8 2 ** 3
assert 3 1 | 2
assert 2 3 & 2
assert 1 3 ^ 2
assert 4 1 << 2
assert 1 4 >> 2
assert true  1 == 1
assert false 1 != 1
assert false 1 >  1
assert true  1 >= 1
assert false 1 <  1
assert true  1 <= 1
assert 2    (var a 1: a +=  1)
assert 1    (var a 3: a -=  2)
assert 6    (var a 2: a *=  3)
assert 2    (var a 4: a /=  2)
assert 1    (var a 5: a %=  2)
assert (-2) (var a 1: a ~=  1)
assert 3    (var a 1: a |=  2)
assert 2    (var a 3: a &=  2)
assert 1    (var a 3: a ^=  2)
assert 4    (var a 1: a <<= 2)
assert 1    (var a 4: a >>= 2)
assert 8    (var a 2: a **= 3)
assert 1    (-1).abs()
assert 1    (-1).neg()
assert (-1) 1.neg()
assert "A"  65.char()

# float
assert 3.0 1.0 +  2.0
assert 1.0 3.0 -  2.0
assert 6.0 2.0 *  3.0
assert 2.5 5.0 /  2.0
assert 1.0 5.0 %  2.0
assert 8.0 2.0 ** 3.0
assert true  1.0 == 1.0
assert false 1.0 != 1.0
assert false 1.0 >  1.0
assert true  1.0 >= 1.0
assert false 1.0 <  1.0
assert true  1.0 <= 1.0
assert 2.0 (var a 1.0: a +=  1.0)
assert 1.0 (var a 3.0: a -=  2.0)
assert 6.0 (var a 2.0: a *=  3.0)
assert 2.0 (var a 4.0: a /=  2.0)
assert 1.0 (var a 5.0: a %=  2.0)
assert 8.0 (var a 2.0: a **= 3.0)
assert 1 1.9.floor()
assert 2 1.1.ceil()
assert 1 1.4.round()
assert 2 1.5.round()

# string
assert 2       "ab".size
assert "ab"    "a".concat("b")
assert "ba"    "ab".reverse()
assert "ba"    "aba".slice(1)
assert "b"     "aba".slice(1 2)
assert 2       "a b".split(" ")
assert 1       "ab".index("b")
assertError    "ab".index("c")
assert "_b_"   "aba".replace("a" "_")
assert "ab"    "\t\r\n ab \t\r\n".trim()
assert true    "ab".starts("a")
assert false   "ab".starts("b")
assert true    "\\"".starts("\\"")
assert false   "ab".ends("a")
assert true    "ab".ends("b")
assert true    "a".has("a")
assert false   "a".has("b")
assert "aa"    "a".repeat(2)

# fn
assert 1 fn(1)()
assert 1 fn(a: a)(1)
assert 2 fn(_ a: a)(1 2)
assert 1 (var a 1: fn(a += 2))
assert 3 (var a 1: fn(a += 2)())

# tuple
assert 1   tuple(1 "a").0
assert "a" tuple(1 "a").1

# list
assert 1            [1].size
assert [1 2]        [1].concat([2])
assert [2]          [1 2].slice(1)
assert [1]          [1 2].slice(0 1)
assert 1            [1][0]
assert [2]          (var a [1]: a[0] = 2)
assert 1            [1].get(0)
assert 1            [1].get((-1))
assert 2            [1 2].get((-1))
assert 2            [1].set(0 2)
assert [1]          (var a []: a.push 1)
assert [2]          [1].map(fn(a: a + 1))
assert [1 3]        [1 2].map(fn(a i: a + i))
assert [1 2 2 3]    [1 2].fmap(fn(a: [a a + 1]))
assert [1 2 3 4]    [1 2].fmap(fn(a i: [a a + i]))
assert [1]          [1 2].keep(fn(a: a == 1))
assert [1]          [1 1].keep(fn(a i: a < i))
assert false        [1 2].all(fn(a: a < 2))
assert true         [1 2].all(fn(a i: a > i))
assert true         [1 2].any(fn(a: a < 2))
assert false        [1 2].any(fn(a i: a > i))
assert [1 2]        [1 2].sort(fn(a b: a > b))
assert [2 1]        [1 2].reverse()
assert [tuple(1 2)] [1].zip([2])
assert 3            [1 2].fold(0 fn(a b: a + b))
assert 1            [1].find(fn(a: a == 1))
assertError         [1].find(fn(a: a == 2))
assert 0            [1].index(fn(a: a == 1))
assertError         [1].index(fn(a: a == 2))
assert "a,b"        ["a" "b"].join(",")
assert true         [1].has(1)
assert false        [1].has(2)
assert 1            [1 2].min
assert 2            [1 2].max
assert [1 1]        [1].repeat(2)

# set
assert set(1)   set(1 2) - set(2)
assert set(1 2) set(1)   | set(2)
assert set(2)   set(1 2) & set(2)
assert set(1 3) set(1 2) ^ set(2 3)
assert 1        set(1).size
assert true     set(1).has(1)
assert false    set(1).add(1)
assert true     set(1).add(2)
assert true     set(1).rid(1)
assert false    set(1).rid(2)
assert set(2)   (var a set(1 2): a.rid(1))
assert [1 2]    set(1 2).list

# dict
assert 1                 dict(1 2).size
assert true              dict(1 2).has(1)
assert 2                 dict(1 2).get(1)
assertError              dict(1 2).get(2)
assert 2                 dict().set(1 2)
assert [1]               dict(1 2).keys()
assert [2]               dict(1 2).values()
assert [tuple(1 2)]      dict(1 2).items()
assert dict(1 2 3 4 5 6) dict(1 2 3 4).concat(dict(3 9 5 6))



# ---( declare )----------------------------------------------
assert 1                            (let a 1)
assert 2                            (var a 1: a = 2)
assert 1                            (let _ f(): def f: 1)
assert 1                            (let _ f(1): def f a: a)
assert 2                            (let _ f(1 2): def f _ a: a)
assert "bool"                       (dec f bool)
assert "(bool)"                     (dec f (bool))
assert "(bool int)"                 (dec f bool int)
assert "(... bool)"                 (dec f ... bool)
assert "(a: ...a a)"                (dec f a: ...a a)
assert "(a b: ...[a b] tuple[a b])" (dec f a b: ...[a b] tuple[a b])
assert 1                            (let _ a(1).b: class a: b int)
assert "a.b"                        (let _ b.string: enum a: b)



# ---( branch )------------------------------------------------------
# short circuit evaluation
assert false false && throw("")
assert true  true || throw("")

# iif
assert 1 iif(true 1 throw(""))
assert 2 iif(false throw("") 2)
assert 2 iif(false throw("") true 2 throw(""))
assert 3 iif(false throw("") false throw("") 3)

# if and else
assert 3 (var a 1: if true : a += 2)
assert 1 (var a 1: if false: a += 2)
assert 3:
  var a 1:
    if true: a += 2
    else   : a += 3
assert 4:
  var a 1:
    if true: a += 2
    else   : a += 3
assert 4:
  var a 1:
    if false    : a += 2
    else if true: a += 3
    else        : a += 4
assert 5:
  var a 1:
    if false     : a += 2
    else if false: a += 3
    else         : a += 4

# switch
assert 10:
  enum a:
    b
    c int
    d:
      e int
      f int
  def g x:
    switch x:
      b: 1
      c v: v
      d v: v.e + v.f
  g(b) + g(c(2)) + g(d(3 4))



# ---( flow )------------------------------------------------------
# return
assert 1 (fn:
  return 1
  2)()
assert 1:
  def f:
    return 1
    2
  f()

# for
assert 3 (var a 1: for b 2: a += b)
assert 3 (var a 1: for _ 2: a += 1)

# while
assert 3 (var a 1: while a < 3: a += 1)

# continue and break
assert 4:
  var a 1:
    for b 5:
      if b == 1:
        continue
      if b == 3:
        break
      a += b

# throw and catch
assert "b" catch(throw("a") fn(e: e.message))
assert "1" catch(throw("a" 1) fn(e: string(e.detail)))
