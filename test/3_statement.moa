# do
assert 2 do(1 2)

# variable
assert 3:
  var a 1
  a += 2
  a

# throw / catch
assert "a" catch(throw("a") fn(e e.message))

# function
assert 1:
  def f 1
  f()
assert 1:
  def f: 1
  f()
assert 1:
  def f:
    let n 1
    n
  f()
assert 3:
  def f a b a + b
  f 1 2
assert 3:
  var a 1
  def f: a += 2
  f()
  a
assert 1:
  var m 0
  def f n:
    var m 1
    iif n == 0 m f(n - 1)
  f(2)

# record
assert 1:
  record s: a int
  s(1).a
assert "b":
  record s:
    a int
    b string
  s(1 "b").b

# return
assert 1 fn(do(return(1) 2))()
assert 1 fn(do(return(1) throw("a")))()
assert 1 fn(do(do(return(1)) 2))()
assert 3:
  def g:
    def f: return 1
    f() + 2
  g()

# if / else
assert 1 fn(do(if(true return(1)) 2))()
assert 2 fn(do(if(false return(1)) else(return(2)) 3))()
assert 2 fn(do(if(false return(1)) else(if(true return(2))) else(return(3)) 4))()
assert 4 fn(do(if(false return(1)) else(if(false return(3))) else(return(4)) 5))()

# while / continue / break
assert 3 do(var(n 1) while(n < 3 n += 1) n)
assert 3 do(var(n 1) while(true n += 1 if(n >= 3 break)) n)
assert 3 do(var(n 1) while(n < 3 do(n += 1 continue n += 9)) n)
