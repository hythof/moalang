# do
assert 2 do(1 2)

# variable
var a 1; a += 2; assert 3 a

# throw / catch
assert "a" catch(throw("a") fn(e e.message))

# function
def f 1; assert 1 f()
def f a b a + b; assert 3 f(1 2)

# struct
#struct s1 ((a int)); assert 1 s1(1).a
#struct s2 ((a int) (b string)); assert "b" s2(1 "b").b

# return
assert 1 fn(do(return(1) 2))()
assert 1 fn(do(do(return(1)) 2))()

# if / else
assert 1 fn(do(if(true return(1)) 2))()
assert 2 fn(do(if(false 1) else(return(2)) 3))()
assert 3 fn(do(if(false 1) else(if(true return(3))) else(return(4)) 5))()
assert 4 fn(do(if(false 1) else(if(false return(3))) else(return(4)) 5))()

# while / continue / break
assert 3 do(var(n 1) while(n < 3 n += 1) n)
assert 3 do(var(n 1) while(true n += 1 if(n >= 3 break)) n)
assert 3 do(var(n 1) while(n < 3 do(n += 1 continue n += 9)) n)
