# bool
(assert true (! false))
(assert false (|| false false))
(assert true (&& true true))

# lambda
(assert 3 ((fn (a b) (+a b)) 1 2))

# number
(assert 3 (+ 1 2))
(assert 6 (+ 1 2 3))
(assert 1 (- 3 2))
(assert 6 (* 2 3))
(assert 2 (/ 4 2))
(assert 1 (% 5 2))
(assert 3 (| 1 2))
(assert 2 (& 3 2))
(assert 1 (^ 3 2))
(assert 8 (** 2 3))
(assert true (== 1 1))
(assert false (!= 1 1))
(assert false (> 1 1))
(assert true (>= 1 1))
(assert false (< 1 1))
(assert true (<= 1 1))
(assert 1 (. (-1) abs))
(assert 1 (. (-1) neg))
(assert (-1) (. 1 neg))
(assert "A" (. 65 char))
(assert 1 (. 1.9 floor))
(assert 2 (. 1.1 ceil))
(assert 1 (. 1.4 round))
(assert 2 (. 1.5 round))

# string
(assert "ab" (++ "a" "b"))
(assert 2 (. "ab" size))
(assert "ba" (. "ab" reverse))
(assert "ba" ((. "aba" slice) 1))
(assert "b" ((. "aba" slice) 1 2))
(assert "_b_" ((. "aba" replace) "a" "_"))

# tuple
(assert 1 (. (tuple 1 "a") 0))
(assert "a" (. (tuple 1 "a") 1))

# list
(assert (list 1 2) (++ (list 1) (list 2)))
(assert 1 (. (list 1) size))
(assert (list 2 1) (. (list 1 2) reverse))
(assert (list 2) ((. (list 1 2) slice) 1))
(assert (list 1) ((. (list 1 2) slice) 0 1))

# regexp
(assert (list "a" "b") ((. (regexp "\\d") split) "a1b"))
(assert "1!2!" ((. (regexp "\\d") replace) "12" (fn (x) (++ x "!"))))

# set
(assert 1 (. (set 1) size))
(assert true ((. (set 1) has) 1))
(assert false ((. (set 1) add) 1))
(assert true ((. (set 1) add) 2))
(assert true ((. (set 1) rid) 1))
(assert false ((. (set 1) rid) 2))
(assert (set 1) (- (set 1 2) (set 2)))
(assert (set 1 2) (| (set 1) (set 2)))
(assert (set 2) (& (set 1 2) (set 2)))
(assert (set 1) (^ (set 1 2) (set 2)))

# dict
(assert (dict 1 2 3 4) (++ (dict 1 2) (dict 3 4)))
(assert 1 (. (dict 1 2) size))

# variable
(var a 1) (+= a 2) (assert 3 a)

# function
(def f (b c) (+ b c)) (assert 3 (f 1 2))

# struct
(struct s ((b int))) (assert 1 (. (s 1) b))

# time
(assert 2024 (. (time 2024 1 2 3 4 5 6) year))
(assert 1 (. (time 2024 1 2 3 4 5 6) month))
(assert 2 (. (time 2024 1 2 3 4 5 6) day))
(assert 3 (. (time 2024 1 2 3 4 5 6) hour))
(assert 4 (. (time 2024 1 2 3 4 5 6) min))
(assert 5 (. (time 2024 1 2 3 4 5 6) sec))
(assert 6 (. (time 2024 1 2 3 4 5 6) offset))
(assert 2 (. (time 2024 1 2 3 4 5 6) wday))
(assert 337 (. (time 2024 12 2 3 4 5 6) yday))
(assert "2024-01-02T03:04:05Z" (. (time 2024 1 2 3 4 5 0) string))
(assert "2024-01-02T04:05:06Z" (. ((. (time 2024 1 2 3 4 5 0) tick) 3661) string))
(assert "2024/1/2 3:4:5 -0006" ((. (time 2024 1 2 3 4 5 (-6)) format) "yyyy/m/d H:M:S z"))
(assert "2024/01/02 03:04:05+0006" ((. (time 2024 1 2 3 4 5 6) format) "yyyy/mm/dd HH:MM:SSz"))
(assert "2024/01/02 03:03:59+0000" ((. (. (time 2024 1 2 3 4 5 6) utc) format) "yyyy/mm/dd HH:MM:SSz"))
