#!node
const limit = 10
const fs = require('fs')
const path = process.argv[2]
const moa_regexp = /([!+\-*/%<>:!=^|&]+|[()\[\]{}]|r?"[^]*?(?<!\\)"|r?'[^]*?(?<!\\)'|-?[0-9]+(?:\.[0-9]+)|[0-9A-Za-z_]+|(?:#[^\n]*|[ \n])+)/ // operator | parenthesis | string | number | id | comment and spaces
const fail = (...a) => a.map(JSON.stringify).join(' ')
const ignoreTypes = 'WhiteSpace LineTerminatorSequence'.split(' ')
const tokenize = (path, text) =>
  path.endsWith('.js') ? [...require('js-tokens')(text)].filter(x => !ignoreTypes.includes(x.type)).map(x => x.value) :
  path.endsWith('.moa') ? text.split(moa_regexp).filter(t => t.length && !t.match(/^[ #\n]/)) :
  fail('Unknown file extention:', path)
const items = process.argv.slice(2).map(path => {
  const source = fs.readFileSync(path, 'utf-8')
  const tokens = tokenize(path, source)
  const d = {}
  tokens.map(t => d[t] = (d[t] || 0) + 1)
  const number_format = n => ('    ' + n).substr(-4)
  const line_format = s => s.replace(/\n/g, '\\n')
  const frequency = Object.entries(d).sort((a, b) => b[1] - a[1] || b[0] - a[0]).slice(0, limit).map(([k, v]) => `  ${number_format(v)}\t${line_format(k)}`).join('\n')
  return {path, frequency, tokens: tokens.length}
})
const best = Math.min(...items.map(o => o.tokens))
console.log("\033[2J")
console.log("\033[1;1H")
items.map(o => {
  console.log(o.tokens, "\t", (o.tokens / best).toFixed(4),  "\t", o.path)
  console.log(o.frequency)
})
