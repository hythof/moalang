struct type:
  name   string
  params list type

struct token:
  text string
  pos  int
  args list token
  type type

let tundef type "" []

def parse source:
  let eot token "" 0 [] tundef

  def stmt a:
    token "__stmt" 0 a tundef

  def call a:
    token "__call" 0 a tundef

  if source.trim().size == 0:
    return stmt []

  # operator | parenthesis | string | number | id | comment and spaces
  let regexp r"([!+\-*/%<>:!=^|&]+|[()\[\]{}]|r?\"[^]*?(?<!\\)\"|-?[0-9]+(?:\.[0-9]+)|[0-9A-Za-z_]+|(?:#[^\n]*|[ \n])+)"
  var n 0
  let tokens source.trim().split(regexp).filter(s => s.size > 0).mapi(t,i => token t (n+=t.size) [] tundef)

  var pos 0
  def peek:
    iif pos < tokens.size:
      tokens[pos]
      eot
  def read:
    if peek().text.match(r"^[ #]"):
      pos += 1
    peek()
  def many f g:
    let a []
    while pos < tokens.size && f(read()):
      let prev pos
      let item g()
      if prev == pos:
        break
      a.push item
    a
  def until s:
    def check t:
      pos += t.text.has("\n").int
      if read().text == s:
        pos += 1
        return false
      true
    many check parse_exp
  def consume:
    let t read()
    if t.text == "":
        throw "out of index" pos tokens
    pos += 1
    t
  def indent t:
    t.text.split("\n").at(-1).size
  def try_call a:
    iif a.size == 1:
      a[0]
      call a
  def alias t a:
    token a t.pos t.args t.type
  def parse_unit:
    def check_next_arg t:
      iif t.text == ",":
        pos += 1; true
        false
    def suffix t:
      let adjacent peek()
      let next read()
      iif:
        adjacent.text == "(" : pos += 1; suffix call([t] ++ until(")"))
        adjacent.text == "[" : pos += 1; suffix call([alias(adjacent "__index") t] ++ until("]"))
        adjacent.text == "." : pos += 1; suffix call([next t consume()])
        next.text     == "=>": pos += 1; call [next t parse_block()]
        next.text     == "," : let remain many(check_next_arg consume); suffix call([next t] ++ remain)
        t
    let t consume()
    suffix case(t.text:
      "!": call [t parse_unit()]
      "-": call [t parse_unit()]
      "[": call [alias(t "list")] ++ until("]")
      "(": try_call until(")")
      ":": parse_block()
      _ : t)
  def parse_exp:
    def is_op2 s:
      s.match(r"^:?[!+\-*/%<>!=^~|&]") && s != "!"
    let lhs parse_unit()
    iif is_op2(read().text):
      call [consume() lhs parse_exp()]
      lhs
  def parse_line:
    def check t:
      !t.text.has("\n") && t.text != ")" && t.text != "]"
    def format a:
      let head iif a.size == 0 "" a[0].text
      try_call case(head:
        "let": [a[0] a[1] try_call(a.slice(2))]
        "return" if a.size >= 2: [a[0] try_call(a.slice(1))]
        _: a)
    format many(check parse_exp)
  def parse_lines n:
    def f:
      let t peek()
      if t.text.has("\n") && indent(t) == n:
        pos += 1
      parse_line()
    stmt many((t => true) f)
  def parse_block:
    let t read()
    iif t.text.has("\n"):
      parse_lines indent(t)
      parse_line()
  parse_lines 0

test t "parser":
  def show x:
    case x.text:
      "__call": "(" ++ x.args.map(show).join(" ") ++ ")"
      "__stmt": iif:
        x.args.size == 0: "()"
        x.args.size == 1: show x.args[0]
        "(__pack " ++ x.args.map(show).join(" ") ++ ")"
      _: x.text
  def eq expect source:
    let actual show(parse(source))
    if expect != actual:
      log " Expet:" expect
      log "Actual:" actual
      log "Source:" source
    t.eq expect actual

  # primitives
  eq "1" "1"
  eq "(- 1)" "-1"
  eq "1.0" "1.0"
  eq "id" "id"
  eq "\"h\\\"i\"" "\"h\\\"i\""
  eq "\"\\\\\"" "\"\\\\\""
  eq "r\"\\t\"" "r\"\\t\""
  eq "(=> a b)" "a => b"

  # container
  eq "(list)" "[]"
  eq "(list 1)" "[1]"
  eq "(list 1 2)" "[1 2]"

  # property access
  eq "(. a b)" "a.b"

  # single operator
  eq "(! a)" "!a"
  eq "((! a) b)" "!a b"

  # binary operators
  eq "(+ a b)" "a + b"
  eq "((+ a b) c)" "a + b c"

  # parentheses
  eq "1" "(1)"
  eq "(f 1)" "(f 1)"
  eq "(+ 1 (+ 2 3))" "1 + 2 + 3"
  eq "(+ (+ 1 2) 3)" "(1 + 2) + 3"

  # function call
  eq "(f 1)" "f 1"
  eq "(f 1)" "f(1)"
  eq "(f (g 1))" "f g(1)"
  eq "(f g 1)" "f g (1)"
  eq "(f)" "f()"
  eq "(f (+ 1 2) 3)" "f(1 + 2 3)"

  # method call
  eq "(. f m)" "f.m"
  eq "(. f 1)" "f.1"
  eq "((. f m))" "f.m()"
  eq "((. f m) a)" "f.m(a)"
  eq "((. f m) a b)" "f.m(a b)"
  eq "((. ((. a f) 1) g) 2)" "a.f(1).g(2)"

  # index access
  eq "(__index x 1)" "x[1]"
  eq "(x (list 1))" "x [1]"
  eq "(__index x 1 2)" "x[1 2]"
  eq "(. (__index x a) b)" "x[a].b"

  # indent
  eq "(a b)" "a:\n  b"
  eq "(a (b c))" "a:\n  b:\n    c"
  eq "(a (b (__pack c d)))" "a:\n  b:\n    c\n    d"
  eq "(a (__pack (b c) d))" "a:\n  b:\n    c\n  d"
  eq "(__pack (a (b c)) d)" "a:\n  b:\n    c\nd"
  eq "(__pack (a (__pack b (c d) e)) f)" "a:\n  b\n  c:\n    d\n  e\nf"

  # statement
  eq "(__pack a b)" "a\nb"
  eq "(__pack (a b) c)" "a b\nc"
  eq "(__pack a (b c))" "a\nb c"

  # comment
  eq "(= a 1)" "#comment\na = 1 # comment\n#comment"
  eq "(a (__pack b c))" "a:\n  #comment\n  b\n  #comment\n  c\n  # comment"

  # combinations
  eq "(! (a b))" "!a(b)"
  eq "(&& true (! false))" "true && !false"
  eq "(+ (a b) c)" "a(b) + c"
  eq "(. (__index a b) c)" "a[b].c"
  eq "((. (__index a b) c) d)" "a[b].c(d)"
  eq "(. (list) a)" "[].a"
  eq "((. a b) c)" "a.b c"
  eq "(. (list) size)" "[].size"
  eq "((. (list 1) m) a)" "[1].m a"
  eq "((. (list 1) m) a)" "[1].m(a)"
  eq "((. (list 1) m) (=> x (>= x 1)))" "[1].m(x => x >= 1)"
  eq "(=> p (+ (. p x) (. p y)))" "p => p.x + p.y"
  eq "(=> (, a b) c)" "a,b => c"
  eq "(=> (, a b c) d)" "a,b,c => d"
  eq "(=> a (b c))" "a => b c"
  eq "(=> a (+ 1 2))" "a => 1 + 2"
  eq "(=> a 1)" "a =>\n  1"
  eq "(=> a (__pack 1 2))" "a =>\n  1\n  2"

  # special
  eq "(let a (b c))" "let a b c"
  eq "(return (a b))" "return a b"

  # edge case
  eq "1" "1\n"
  eq "()" ""
  eq "()" "\n"
  eq "(f a b)" "f(a\nb\n)"


def infer root:
  var id 0
  let tvoid type "void" []
  def tnew:
    type (id+=1).string []
  def tmore t:
    type "__more" [t]
  def tfunc types:
    type "" types
  let tv1     tnew()
  let tbool   type "bool" []
  let tint    type "int" []
  let tfloat  type "float" []
  let tstring type "string" []
  let tlist   tfunc [tmore(tv1) type("list" [tv1])]
  var tprops  dict(
    "list" dict(
      "size" _ => tint
      "map" t => tfunc([tfunc([t.params[0] tv1]) type("list" [tv1])])
      "filter" t => tfunc([tfunc([t.params[0] tbool]) t])
      )
    "string" dict(
      "trim" _ => tfunc [tstring]
      "size" _ => tint
      "split" _ => tfunc [tstring type("list" [tstring])]
      ))

  def is_tvar t:
    t.name.match(r"[0-9]")
  def prune t:
    t.params = t.params.map(prune)
    iif t.name.match(r"^__ref"):
      prune t.params[0]
      t
  def tref a b:
    if !is_tvar(a):
      thorw "BugTRef"
    if a == b:
      return a
    a.name = "__ref_" ++ a.name
    a.params = [b]
    a
  def fresh ng t:
    let memory dict()
    def rec t:
      t = prune(t)
      iif:
        is_tvar(t): iif:
          ng.has(t.name): t
          memory.has(t.name): memory.get(t.name)
          memory.set(t.name tnew())
        type t.name t.params.map(rec)
    rec(t)
  def no_more t:
    iif t.name == "" && t.params[0].name == "__more":
      t.params[1]
      t
  def lambda nodes node ng tenv:
    let args nodes.map(node => tuple(node.text tnew()))
    let new_ng ng ++ args.map(x => x.1.name)
    let new_tenv tenv ++ dict(args)
    let ret analyze node new_ng new_tenv
    tfunc args.map(arg => arg.1) ++ [ret]

  def unify a b:
    a = prune(a)
    b = prune(b)
    let va is_tvar a
    let vb is_tvar b
    iif:
      va && vb: tref a b
      va: tref a b
      vb: tref b a
      a.name == b.name && a.params.size == b.params.size: a.params.mapi(ap,i => unify(ap b.params[i])); a
      throw "InvalidType" a b
  def apply f a:
    iif:
      f.size == 0 && a.size > 0:
        throw "ArgumentsNotEnough" f a
      f.size == 0 && a.size == 0:
        throw "BugToApply"
      f[0].name == "__more" && a.size == 0:
        apply f.slice(1) a
      f[0].name == "__more":
        unify f[0].params[0] a[0]
        apply f a.slice(1)
      f.size == 1 && a.size == 0:
        f[0]
      unify f[0] a[0]; apply f.slice(1) a.slice(1)
  def call nodes ng tenv:
    let head nodes[0]
    case head.text:
      "=>":
        let anodes iif nodes[1].text == "__call":
          nodes[1].args.slice(1)
          [nodes[1]]
        lambda anodes nodes.at(-1) ng tenv
      ".":
        let target analyze nodes[1] ng tenv

        let tname iif is_tvar(target) tprops.find(k,v => v.has(nodes[2].text)).0 target.name
        if is_tvar(target):
          unify tenv.get(tname) target
        tprops.get(tname).get(nodes[2].text)(target)
      "let":
        # TODO: deny modify for let binding
        let t iif nodes.size == 3:
          analyze nodes[2] ng tenv
          call nodes.slice(2) ng tenv
        tenv.set nodes[1].text t
      "var":
        let t iif nodes.size == 3:
          analyze nodes[2] ng tenv
          call nodes.slice(2) ng tenv
        tenv.set nodes[1].text t
      "struct":
        let targs nodes.slice(2 (-1)).map(t => tuple(t.text tnew()))
        var generics dict(targs)
        let body nodes.at(-1)
        def swap_generic t:
          iif generics.has(t) generics.get(t).name t
        let ty type nodes[1].text targs.map(ta => ta.1)
        def to_prop line:
          let a line.args.slice(1).map(t => swap_generic(t.text))
          let t type(a[0] a.slice(1).map(s => type(s [])))
          tuple line.args[0].text t
        let props case body.text:
          "__stmt": body.args.map(to_prop)
          "__call": [to_prop(body)]
          _: throw "BugStruct"
        let name nodes[1].text
        let f tfunc(props.map(p => p.1) ++ [ty])
        tenv.set name f
        tprops = tprops ++ dict(name dict(props.map1(p => _ => p)))
        f
      "def":
        let fname nodes[1].text
        let ft tnew()
        let f lambda nodes.slice(2 (-1)) nodes.at(-1) ng ++ set(ft.name) tenv ++ dict(fname ft)
        tenv.set fname f
        f
      "__index":
        let a analyze nodes[1] ng tenv
        let index analyze nodes[2] ng tenv
        unify tint index
        a.params[0]
      _:
        let f analyze head ng tenv
        let a nodes.slice(1).map(node => analyze(node ng tenv))
        if is_tvar(f):
          let ret tnew()
          unify tfunc(a ++ [ret]) f
          ng.add(ret.name)
        no_more apply(prune(f).params a)
  def analyze node ng tenv:
    node.type = case(node.text:
      "__stmt"           : node.args.map(x => analyze x ng tenv).at(-1)
      "__call"           : call node.args ng tenv
      r"^true|false$"    : tbool
      r"^[0-9]+\.[0-9]+$": tfloat
      r"^[0-9]+$"        : tint
      r"\""              : tstring
      _                  : fresh ng tenv.get(node.text))

  analyze root set() dict(
    "!" tfunc([tbool tbool])
    "+" tfunc([tint tint tint])
    "-" tfunc([tint tint tint])
    "*" tfunc([tint tint tint])
    "/" tfunc([tint tint tint])
    "==" tfunc([tv1 tv1 tbool])
    "!=" tfunc([tv1 tv1 tbool])
    ">" tfunc([tv1 tv1 tbool])
    ">=" tfunc([tv1 tv1 tbool])
    "<" tfunc([tv1 tv1 tbool])
    "<=" tfunc([tv1 tv1 tbool])
    "return" tfunc([tv1 tv1])
    "if" tfunc([tbool tv1 tvoid])
    "iif" tfunc([tbool tv1 tv1 tv1])
    "log" tfunc([tv1 tv1])
    "list" tlist
    "string" tstring
    "true" tbool
    "false" tbool)

test t "type inference":
  def show t:
    iif t.name.match(r"^__ref"):
      show t.params[0]
      t.name ++ iif(t.params.size == 0 "" "(" ++ t.params.map(show).join(" ") ++ ")")
  def simplify s:
    var d dict()
    var i (-1)
    s.replace r"[0-9]+" n => iif d.has(n):
      d.get(n)
      d.set(n i+=1)
  def eq expect source:
    let node parse source
    t.eq expect simplify(show(infer(node))) source
  def reject source:
    let s catch show(infer(parse(source))) e => e.id
    t.eq "InvalidType" s

  # primitives
  eq "bool" "true"
  eq "bool" "false"
  eq "int" "1"
  eq "float" "1.1"
  eq "string" "\"s\""
  eq "(0 0)" "x => x"
  eq "(0 1 1)" "x,y => y"
  eq "(0 1 2 2)" "x,y,z => z"

  # container
  eq "list(0)" "[]"
  eq "list(int)" "[1]"

  # property
  eq "int" "[].size"
  eq "int" "\"\".size"
  eq "(string string)" "def a b: b.trim()"

  # generic property
  # eq "int" "def a: a.size\na([])" # TODO

  # single operator
  eq "bool" "!true"

  # binary operators
  eq "int" "1 + 2"

  # definition
  eq "(int)" "def a: 1"
  eq "(0 0)" "def a b: b"
  eq "int" "def a b: b\nlet c a 1"

  # struct
  eq "(int a)" "struct a: b int"
  eq "a" "struct a: b int\na(1)"
  eq "int" "struct a: b int\na(1).b"
  eq "(0 a(0))" "struct a t: b t"
  eq "a(int)" "struct a t: b t\na(1)"
  eq "(int 0 a(0))" "struct a t:\n  b int\n  c t"
  eq "a(float)" "struct a t:\n  b int\n  c t\na(1 1.0)"
  eq "(list(int) a)" "struct a: b list int"
  eq "(list(a) a)" "struct a: a list a"

  # function call
  eq "int" "def f: 1\nf()"

  # method call
  eq "list(int)" "[1].map(x => x + 1)"

  # index access
  eq "int" "[1][0]"

  # block
  eq "void" "if true: 1"

  # steps
  eq "int" "true\n1"

  # combinations
  eq "int"                            "def f x: x + 1\ndef g x: x + 2\nf(1) + g(1)"
  eq "((0 1 2) (0 1) 0 2)"            "def _ x y z: x z (y z)"
  eq "(bool (bool bool) (bool bool))" "def _ b x: iif x(b) x (x => b)"
  eq "(bool bool)"                    "def _ x: iif true x (iif x true false)"
  eq "(bool bool bool)"               "def _ x y: iif x x y"
  eq "(0 0)"                          "def _ n: (x => (x (y => y))) (f => f n)"
  eq "((0 1) 0 1)"                    "def _ x y: x y"
  eq "((0 1) ((0 1) 0) 1)"            "def _ x y: x (y x)"
  eq "(0 ((0 1 2) 3 1) (0 1 2) 3 2)"  "def _ h t f x: f h (t f x)"
  eq "((0 0 1) ((0 0 1) 0) 1)"        "def _ x y: x (y x) (y x)"
  eq "(((0 0) 1) 1)"                  "def id x: x\ndef f y: id y(id)\nf"
  eq "(bool (0 0))"                   "def f x: x\ndef g y: y\ndef h b: iif b f(g) g(f)"
  eq "(int)"                          "def f x: x\ndef _: iif f(true) f(1) f(2)"
  eq "(int)"                          "def f x: 3\ndef g: f(true) + f(4)"

  # implicit curry
  #eq "((0 1) (1 2) 0 2)"              "def f g x: g (f x)"
  #eq "(bool 1 (1 ((1 2) 2) 3) 3)"     "def h b f z:\n  def g1 x: x f\n  def g2 x: x f\n  iif b g1(z g2) g2(z g1)"

  # recursive
  eq "(0 1)" "def f x: f x"

  # type errors
  reject "1 + true"

def compile_to_go source:
  #let node infer(parse(source))
  let node (parse(source))
  #log node
  "package main\nfunc main() { println(123) }"
