(record Token
  code   string
  offset int
  args   list[Token])

(record Type
  name   string
  params list[Type]
  props  dict[string Type])

(def parse(source)
  (var offset 0)
  (let tempty (Token "" 0 list()))
  (def tlist(a) (Token "" 0 a))
  (let reg regexp("([+\\-*\\/%|&<>!=]+|[(){};.]|[A-Za-z_][0-9A-Za-z_]*|[0-9]+(?:\\.[0-9]+)?|\".*?(?<!\\\\)\"|(?:#[^\\n]*|\\s+))" "s"))
  (let tokens source.split(reg).fmap((fn code do(
    (+= offset code.size)
    (iif
      regexp("^[^#\\s]").match(code) Token(code offset (list))
      (list))
  ))))
  (var pos 0)
  (def next (+= pos 1) tokens[(- pos 1)])
  (def back(t) (-= pos 1) t)
  (def many(f) (tlist (many_r f (list))))
  (def many_r(f acc)
    (iif
      (>= pos tokens.size) acc
      (fn(t
        (iif
          (== t tempty) acc
          (many_r f (++ acc (list t)))))
        (f (next)))))
  (def parseList
    (many (fn t (iif (&& (!= t.code ")") (!= t.code "]")) (parseUnit t) tempty))))
  (def parseUnit(t)
    (def suffix(t)
      (iif (<= tokens.size pos) t (suffix_ t)))
    (def suffix_(t)
      (let tt (next))
      (let near (== tokens[(- pos 2)].offset (- tt.offset tt.code.size)))
      (iif (== tt.code ".") (suffix (tlist (list tt t (next))))
        (&& near (== tt.code "(")) (suffix (tlist (++ (list t) (parseList).args)))
        (&& near (== tt.code "[")) (suffix (tlist (++ (list tt t) (parseList).args)))
        (back t)))
    (iif
      (== t.code "(") (suffix (parseList))
      (== t.code "!") (suffix (tlist (list t (parseUnit (next)))))
      (suffix t)))
  (many parseUnit).args)

(def infer(root)
  (def tf(a)       (Type "__fn"   a          (dict)))
  (def tor(a)      (Type "__or"   a          (dict)))
  (def tmore(a)    (Type "__more" a          (dict)))
  (def tlimit(t u) (Type "__lim"  (list t u) (dict)))
  (def tlist(t)    (Type "list"   (list t)   (dict
    "push" (tf (list t t))
    "at"   (tf (list tint t))
    "size" tint)))
  (def tdict(t u)  (Type "dict"   (list t u) (dict
    "set" (tf (list t u u))
    "size" tint)))
  (let tv1         (Type "1"      (list)     (dict)))
  (let tv2         (Type "2"      (list)     (dict)))
  (let tv3         (Type "3"      (list)     (dict)))
  (let tv4         (Type "4"      (list)     (dict)))
  (let tvoid       (Type "void"   (list)     (dict)))
  (let tint        (Type "int"    (list)     (dict)))
  (let tfloat      (Type "float " (list)     (dict)))
  (let tstring     (Type "string" (list)     (dict)))
  (let tbool       (Type "bool"   (list)     (dict)))
  (let tib         (tor (list tint tbool)))
  (let tnum        (tor (list tint tfloat)))
  (let tserial     (tor (list tint tfloat tstring tbool)))
  (let embedded dict(
    "io" Type("io" (list) dict("puts" tf((list tserial tvoid))))
    "assert" (tf (list tv1 tv1 tvoid))
    "list"   (tf (list tmore(list(tv1)) tv1 tlist(tv1)))
    "dict"   (tf (list tmore(list(tv1 tv2)) tdict(tv1 tv2)))
    "!"      (tf (list tbool tbool))
    "||"     (tf (list tbool tbool))
    "&&"     (tf (list tbool tbool))
    "+"      (tf (list tlimit(tv1 tnum) tv1 tv1))
    "-"      (tf (list tlimit(tv1 tnum) tv1 tv1))
    "*"      (tf (list tlimit(tv1 tnum) tv1 tv1))
    "/"      (tf (list tlimit(tv1 tnum) tv1 tv1))
    "%"      (tf (list tlimit(tv1 tnum) tv1 tv1))
    "**"     (tf (list tlimit(tv1 tnum) tv1 tv1))
    "|"      (tf (list tlimit(tv1 tib) tv1 tv1))
    "&"      (tf (list tlimit(tv1 tib) tv1 tv1))
    "+="     (tf (list tlimit(tv1 tnum) tv1 tv1))
    "-="     (tf (list tlimit(tv1 tnum) tv1 tv1))
    "*="     (tf (list tlimit(tv1 tnum) tv1 tv1))
    "/="     (tf (list tlimit(tv1 tnum) tv1 tv1))
    "%="     (tf (list tlimit(tv1 tnum) tv1 tv1))
    "**="    (tf (list tlimit(tv1 tnum) tv1 tv1))
    "++"     (tf (list tlimit(tv1 tor(tstring tlist(tv2) tdict(tv3 tv4))) tv1 tv1))
    "|"      (tf (list tlimit(tv1 tib) tv1 tv1))
    "&"      (tf (list tlimit(tv1 tib) tv1 tv1))
    "^"      (tf (list tint tint tint))
    ">"      (tf (list tv1 tv1 tbool))
    "<"      (tf (list tv1 tv1 tbool))
    ">="     (tf (list tv1 tv1 tbool))
    "<="     (tf (list tv1 tv1 tbool))
    "=="     (tf (list tv1 tv1 tbool))
    "!="     (tf (list tv1 tv1 tbool))
    "true"   tbool
    "false"  tbool
  ))
  (def inferTop(node tenv)
    (iif
      tenv.has(node) tenv.get(node)
      tenv.set(node inferWith(node tenv))))
  (def inferWith(node tenv)
    (def touch(x) inferTop(x tenv))
    (def get(token)
      (let key token.code)
      (iif
        regexp("^[0-9]+\.").match(key) tfloat
        regexp("^[0-9]").match(key)    tint
        key.starts(34.char)            tstring
        tenv.has(key)                  tenv[key]
        embedded.has(key)              embedded[key]
        (throw (++ "key `" key "` not found"))))
    (def put(token type)
      tenv.set(token.code type))
    (def unify(a b)
      # TODO implement
      b)
    (def call(f args)
      (iif (== args.size 0)
        f
        (do
          args.mapi(fn(a i (unify f.params[i] a)))
          f.params.at((-1)))))
    (iif
      (== node.args.size 0)        get(node)
      (&& (== node.args.size 2) (== node.args[0].code "-")) inferTop(log(node.args[1]))
      (== node.args[0].code ".")   touch(node.args[1]).props[node.args[2].code]
      (== node.args[0].code "def") put(node.args[1] node.args.slice(2).map(touch).at((-1)))
      (== node.args[0].code "var") put(node.args[1] (touch node.args[2]))
      (== node.args[0].code "let") put(node.args[1] (touch node.args[2]))
      (== node.args[0].code "do")  node.args.slice(1).map(touch).at((-1))
      (call (touch node.args[0]) node.args.slice(1).map(touch))))
  (let troot dict())
  root.map(fn(node (inferTop node troot)))
  troot)

(def compileToJs(source)
  (let nodes (parse source))
  (let tenv (infer nodes))
  (def isFn(t)
    (== t.name "__fn"))
  (def method(target field arguments)
    (let tname tenv[target].name)
    (let fname field.code)
    (iif (&& (== tname "dict") (== fname "set"))
      (++ "__" tname "_" fname "(" gen(target) "," arguments.map(gen).join(",") ")")
      (++ (gen target) "." field.code "(" arguments.map(gen).join(",") ")")))
  (def property(node o f)
    (let target tenv[o].name]
    (iif
      (&& (== target "list") (== f.code "size")) (++ gen(o) ".length")
      (&& (== target "dict") (== f.code "size")) (++ gen(o) ".size")
      (++ gen(o) "." f.code)))
  (def apply(node)
    (let head node.args[0])
    (let tail node.args.slice(1))
    (def isOp2(op)
      (&& (!= op "!") (regexp "^[+\\-*\\/%|&<>!=^]").match(op)))
    (def op2(op l r)
      (++ l " " op " " r))
    (def fname(node)
      (iif (== node.args 0)
        node.code
        node.args[0].code))
    (def fargs(node)
      node.args.map(fn(x x.code)).join(","))
    (def exps(a)
      (++ "(() => {" a.slice(0 (-1)).map(gen).join(";\n  ") ";\n  return " gen(a.at((-1))) "})()"))
    (iif
      (&& (== head.args.size 3) (== head.args[0].code ".")) (method head.args[1] head.args[2] tail)
      (== head.code "def") (++ "const " fname(tail[0]) " = (" (fargs tail[0]) ") => " (exps tail.slice(1)))
      (== head.code "do")  (exps tail)
      (== head.code "var") (++ "let "   tail[0].code " = " gen(tail[1]))
      (== head.code "let") (++ "const " tail[0].code " = " gen(tail[1]))
      (== head.code ".") (property node tail[0] tail[1])
      (isOp2 head.code) (op2 head.code gen(tail[0]) gen(tail[1]))
      (++ gen(head) "(" tail.map(gen).join(", ") ")")))
  (def gen(node)
    (iif
      (== node.args.size 0) node.code
      (apply node)))
  nodes.map(gen).join("\n"))
