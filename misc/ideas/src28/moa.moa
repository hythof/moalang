def main io.puts(gen(parse(io.in.string)))
def gen node {
  io.puts node
  return "package main\n import \"fmt\"\n func main() { fmt.Println(\"hello world\") }"
}
def parse s {
  let tokens tokenize s
  var pos 0
  def consume {
    let token tokens.at(pos)
    pos += 1
    return token
  }
  def unit {
    consume()
  }
  def line {
    let lineno tokens.at(pos).lineno
    let a loop(t => t.lineno === lineno && ")]}".has(t.code) == false unit)
    io.puts tokens.slice(pos pos+2)
    return iif(a.size == 1 a.at(0) a)
  }
  def loop f g {
    var a list()
    while pos < tokens.size && f(tokens.at(pos)) {
      a.push g()
    }
    return a
  }
  return ast("" loop(_ => true line))
}
def tokenize s {
  var tokens list()
  var lineno 1
  let t2 "+= -= *= /= %= != == <= >= << >> || &&".split(" ")
  let t1 "+-*/%=<>|&[](){}.?"
  for s.size i {
    let left i
    if t2.has(s.slice(i i+2)) {
      tokens.push(Token(s.slice(i i + 2) i lineno))
      i += 1
    } else if t1.has(s.at(i)) {
      tokens.push(Token(s.at(i) i lineno))
    } else if s.at(i) == "\"" {
      i += 1
      while i < s.size && s.at(i) != "\"" {
        if s.at(i) == "\\" {
          i += 1
        }
        i += 1
      }
      i += 1
      tokens.push(Token(s.slice(left i) left lineno))
    } else if "0" <= s.at(i) && s.at(i) <= "9" {
      while i < s.size && "0" <= s.at(i) && s.at(i) <= "9" {
        i += 1
      }
      tokens.push(Token(s.slice(left i) left lineno))
    } else if ("A" <= s.at(i) && s.at(i) <= "Z") || ("a" <= s.at(i) && s.at(i) <= "z") || s.at(i) == "_" {
      while i < s.size &&  ("A" <= s.at(i) && s.at(i) <= "Z") || ("a" <= s.at(i) && s.at(i) <= "z") || s.at(i) == "_" || "0" <= s.at(i) && s.at(i) <= "9" {
        i += 1
      }
      tokens.push(Token(s.slice(left i) left lineno))
    } else if s.at(i) == " " || s.at(i) == "\t" {
    } else if s.at(i) == "\n" {
      lineno += 1
    } else {
      io.warn "unexpected char" i s.at(i)
    }
  }
  return tokens
}
class Token {
  code   string
  pos    int
  lineno int
}
class ast {
  code string
  args list[ast]
}
