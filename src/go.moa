compile x = parser("123" 0).parse_int
compiler x = build(parse(x))
parse x = ast.string(x)
build x = x.value
table:
  values tuple(string int).array
branches:
  values tuple(ast ast).array
ast:
| int value int
| string value string
| bool value bool
| func args string.array, body ast
| array values ast.array
| def name string, value ast
| class name string, attrs string.array, methods table
| instance name string, methods table
| enum name string, methods table
| op2 operator string, left ast, right ast
| ref name string
| member target ast, name string
| apply target ast, args ast.array
| seq lines ast.array
| fork target branches
parser:
  src string
  pos int
  satisfy f =
    c <- src(pos)
    guard(f(c))
    pos += 1
    f(c)
  parse_int =
    n <- read_int
    ast.int(n.to_int)
  read_int = many1(read_any("0123456789".to_array))
  read_any xs = satisfy(x -> xs.include(x))
  many1 f =
    x <- f
    xs <- many(f)
    [x] ++ xs
  many f = many_acc(f [])
  many_acc f acc = x <- f
  | acc ++ [x]
  | acc
