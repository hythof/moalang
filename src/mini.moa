struct Token:
  code string
  line int
  column int

struct Node:
  value Token
  apply []Node

def tokenize src:
  let id "abcdefghijklmnopqrstuvxwyz_"
  let num "0123456789"
  let idnum id + num
  let singles "():."
  let symbols "+ - * / =".split " "
  var tokens []
  var line 1
  var column 1
  var pos 0

  def push fragment:
    tokens.push Token(fragment line column)
    column += fragment.replace("\n" "").size

  def quote q:
    pos += 1
    let s q + until(c => c != q) + q
    pos += 1
    s

  def until f:
    s = ""
    while pos < src.size && f src.at(pos):
      s += src.at pos
      pos += 1
    pos -= 1
    s

  def breaklines:
    s = ""
    while pos < src.size && src.at(pos) == "\n":
      pos += 1
      line += 1
      s = "\n" + until(c => c == " ")
    column = 1
    push s

  def consume:
    var c src.at pos
    if c == "\\":
      pos += 1
      c = src.at pos
      if c == "n": c = "\n"
      if c == "t": c = "\t"
      if c == "\\": c = "\\"
    c

  while pos < src.size:
    let c consume()
    if c == `"`: push quote(c)
    if c == `'`: push quote(c)
    if c == " ": column += until(c => c == " ").size
    if c == "\n": breaklines()
    if singles.contains c: push c
    if symbols.contains c: push until(symbols.contains)
    if id.contains c: push until(idnum.contains)
    if num.contains c: push until(num.contains)
    pos += 1
  tokens

def parse tokens:
  var pos 0
  def br x:
    pos += 1
    x
  def sepby1 f g: many_acc do(f g) [f]
  def many f: many_rec f []
  def many_rec acc f:
    many_rec acc.append(f()) f
  #def unit: 
  def line: sepby1(unit br)
  def lines: many line
  #lines
  []

def generate nodes:
  "hi!"

def main:
  let src io.stdin
  let tokens tokenize src
  let nodes parse tokens
  let js generate nodes
  io.print "-- nodes:"
  io.dump nodes

test t:
  t.eq [Token("def" 1 1) Token("f" 1 5) Token(":" 1 6) Token("\n  " 2 1) Token("1" 2 3)] tokenize(`def f:\n  1`)
  t.eq ["def" "func" "arg1" ":" "\n  " "f" "(" "arg1" "+" "10" ")" "==" `"hi"` "." "size"] tokenize(`def func arg1:\n  f (arg1 + 10) == "hi".size`).map(t => t.code)
  t.eq [] parse(tokenize("def main: 1"))
