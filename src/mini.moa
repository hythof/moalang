struct Token:
  code string
  line int
  column int

struct Tree:
  leaf Token
  forest []Tree

def tokenize src:
  var tokens []
  var chunk ""
  var line 1
  var column 1

  def push:
    if chunk.size > 0:
      column += chunk.size
      tokens.push Token(chunk line column)
      chunk = ""

  def quote q:
    push
    chunk = q
    i += 1
    while i < src.size && src.at(i) != q:
      chunk += src.at i
      i += 1
    chunk += q
    push

  var i (-1)
  while i + 1 < src.size:
    i += 1
    var c src.at i
    if c == "\\":
      i += 1
      c = src.at i
      fork:
        c == "n": c = "\n"
        c == "t": c = "\t"
        c == "\\": c = "\\"
    fork:
      c == `"`: quote c
      c == `'`: quote c
      c == "\n":
        push
        while i < src.size && src.at(i) == "\n":
          line += 1
          column = 1
          chunk = "\n"
          i += 1
          while i < src.size && src.at(i) == " ":
            chunk += " "
            i += 1
        push
        i -= 1
      c == "(" || c == ")" || c == ":" || c == ".":
        push
        chunk = c
        push
      c == " ":
        push
      true:
      chunk += c
  push
  tokens

def parse tokens:
  io.print tokens.size
  []

def generate nodes:
  "hi!"

def main:
  let src io.stdin
  let tokens tokenize src
  let nodes parse tokens
  let js generate nodes
  io.print "-- nodes:"
  io.dump nodes

test t:
  t.eq ["def" "func" "arg1" ":" "\n  " "f" "(" "arg1" "+" "1" ")" "==" `"hi"` "." "size"] tokenize(`def func arg1:\n  f (arg1 + 1) == "hi".size`).map(t => t.code)
