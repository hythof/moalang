def tokenize src:
  var tokens []
  var token ""

  def push:
    if token.size > 0:
      tokens.push token
      token = ""

  def quote q:
    push
    token = q
    i += 1
    while i < src.size && (src.at i) != q:
      token += src.at i
      i += 1
    token += q
    push

  var i (-1)
  while i + 1 < src.size:
    i += 1
    let c src.at i
    fork:
      c == `"`: quote c
      c == `'`: quote c
      c == "\n":
        push
        while i < src.size && (src.at i) == "\n":
          token = "\n"
          i += 1
          while i < src.size && (src.at i) == " ":
            token += " "
            i += 1
        push
        i -= 1
      c == "(" || c == ")" || c == ":":
        push
        tokens.push c
      c == " ":
        push
      true:
      token += c

  push
  tokens

def parse tokens:
  io.print tokens.size
  []

def generate nodes:
  "hi!"

def main:
  let src io.stdin
  let tokens tokenize src
  let nodes parse tokens
  let js generate nodes
  io.print "-- nodes:"
  io.dump nodes

test t:
  t.eq ["def" "func" "arg1" "arg2" ":" "f" "arg1" "+" "1" "==" "2"] (tokenize `def func arg1 arg2: f arg1 + 1 == 2`)
