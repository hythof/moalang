compile src = do(
  tokens <- tokenize(src)
  nodes <- parse(tokens)
  generate(nodes))

tokenize = src => do(
  pos := 0
  line := 1
  column := 1
  new = tag,val => tag,val,line,column
  new_id = new("id")
  new_val = new("val")
  new_sym = new("sym")
  new_ignore = new("ignore")
  part = n => src.slice(pos pos+n.size)
  consume = s => do(
    pos+=s.size
    s.each(c => if(c == "\n"
      column = 1; line += 1
      column += 1))
    s)
  try = cond,s => if(cond consume(s) nil)
  satisfy = f => part(1) -> c; try(f(c) c)
  eq = s => part(s.size) -> ss; try(s==ss s)
  ne = s => part(s.size) -> ss; try(s!=ss s)
  between = l,r,c => eq(l); c->v; eq(r); v
  select = s => many1(satisfy(c => s.contains(c)))
  s_num = "0123456789"
  s_az = "abcdefghijklmnopqrstuvwxyz"
  s_az09 = s_az . s_num
  t_id = new_id $ select(s_az) -> c; many1(select(s_az09)) -> cs; cs.prepend(c).join("")
  t_val = new_val $ selct(
      many1(select(num))
      many1(between("\"" "\"" many(ne("\"")))))
  t_sym = new_sym $ select("+ - * / += -= *= /= := : = && || > >= < <= ( ) ,".split(" "))
  t_com = new_ignore $ eq("#"); many(ne("\n"))
  t_space = new_ignore $ many(select(" \n"))
  many(selct(t_id t_val t_sym t_com t_space)).flatten.filter(t => t.tag != "ignore"))

parse tokens = do(
  pos := 0
  nodes := []
  new_node = tag,val => tag,val
  new_val = val => new_node("val" val)
  new_call = self,argv => new_node("call" self,argv)
  new_op2 = op,lhs,rhs => new_node("op2" op,lhs,rhs)
  new_group = nodes => new_node("group" nodes)
  new_call = node => new_node("call" node)
  new_parentheses = node => new_node("parentheses" node)
  read_tokens = do(
    token <- tokens[pos]
    case(token.tag
      "val" new_val(token.val)
      "id" if(next.val == "(" new_call(token.val read_argv new_val(token.val)))
      "sym" new_op2("")
    )
  read_tokens))

generate nodes = nodes.map(gen).join(",\n")
gen node = case(node.tag
  "parentheses" "(" + gen(tag.val) + ")"
  "val" tag.val
  "call" tag.val + "(" + generate(tag.argv).join(",") + ")"
  "op2" op2(tag.val))
op2 v = case(v.op
  "=>" "((" + v.lhs + ") => " + gen(v.rhs) + ")"
  ":=" "let " + gen(v.lhs) + "=" gen(v.rhs)
  _ gen(v.lhs) + v.op + gen(v.rhs))
