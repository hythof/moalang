ast:| id string | int int | str string | op2: op string, lhs ast, rhs ast | call: self ast, args []ast

compile = src => src
tokenize = src => do(parse_top
  index := 0

  miss = error("miss")
  satisfy = f => do(
    n <- index
    c <- src.slice(n n+1)
    miss.unless(f(c))
    index += 1
    c)
  equal = s => do(
    n <- index
    miss.unless(s == src.slice(n n+s.len))
    index += s.len
    s)
  _many = f,acc => do(
    c <- f
    acc.push(c)
    _many(f acc)).catch(miss acc)
  many = f => _many(f [])
  many1 = f => do(
    c <- f
    cs <- many(f)
    [c] ++ cs)
  any = ary => miss.first(ary equal)
  between = l,r,c => do(
    equal(l)
    v <- c
    equal(r)
    v)

  read_op = any("== != <= >= ++ += -= *= /= + - * / .".split(" "))

  parse_id = do(
    cs <- many1(satisfy(c => ("a" <= c) && (c <= "z")))
    ast.id(cs.join("")))
  parse_num = do(
    cs <- many1(satisfy(c => ("0" <= c) && (c <= "9")))
    ast.int(cs.join("").int))
  parse_str = do(
    cs <- between("\"" "\"" many1(satisfy(c => c!= "\"")))
    ast.str(cs.join("")))
  parse_op2 = do(
    lhs <- parse_unit
    do(
      op <- read_op()
      rhs <- parse_op2()
      ast.op2(op lhs rhs)).catch(miss lhs))
  parse_group = do(between("(" ")" parse_op2))
  parse_unit = miss.any([parse_group parse_id parse_num parse_str])
  parse_top = parse_op2)
