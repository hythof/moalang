top: define+
define:
| "let" id exp
| "var" id exp
| "fn" id+ exp
| "struct" id+ "{" (id type lf)* } "}"
exp: node (op2 exp)*
node: bottom ("." id ("(" exp+ ")"))*
bottom:
| "(" exp ")"                    # priority   : 1 * (2 + 3)
| "[" exp* "]"                   # array      : [] [1 2]
| "[" (":" | (exp ":" exp)*) "]" # dict       : [:] ["key1":1 "key2":2+3]
| '"' [^"]* '"'                  # string     : "hi"
| id ("," id)* "=>" exp          # lambda
| [0-9]+ ("." [0-9]+)?
| id ("(" exp+ ")")?
| block
block: "{" ((define | statement | exp) lf)* "}"
statement:
| "if" exp block ("elif" exp block)* ("else" block)?
| "for" id exp block
| "while" exp block
| "continue" cond?
| "break" cond?
| "return" exp? cond?
| "p" exp+ cond?                 # print one line while developing
| "pp" exp+ cond?                # print multiple lines while developing
cond:
| "if" exp
| "unless" exp
id: [A-Za-z_][A-Za-z0-9_]*
type: id ("(" type+ ")")?
op2: [+-/%*=<>|&^,;]+
lf: ";" | "\n"
