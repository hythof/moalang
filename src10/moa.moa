type:
  name string

arg:
  name string
  type type

node|
  id:
    name string
  call:
    target node
    argv array(node)
  method:
    target node
    name string
    argv array(node)
  func:
    name string
    args array(arg)
    ret type
    nodes array(node)

emit s = io.write(s + "\n")

tokenize src =
  pos <- 0
  tokens <- []
  miss = error("miss")
  satisfy f =
    miss.if(pos >= src.size)
    c <- src.at(0)
    miss.if(f(c))
    c
  many f = many_acc(f [])
  many_acc f acc = match(f
    miss acc
    _ many_acc(f acc.concat([r])))
  __debug(src)
  __debug(tokens)
  tokens

parse tokens = [
  func("main" [] type("i32") [])
]

generate_llvm node =
  gen_func node =
    rt <- node.ret.name
    emit("define dso_local " + rt + " @" + node.name + "() {")
    emit("ret " + rt + " 0")
    emit("}")
  match(node func gen_func)

generate_js node =
  __debug(node)
  emit("process.stdout.write('1')")

main =
  src <- io.read
  tokens <- tokenize(src)
  nodes <- parse(tokens)
  if(io.argv(1) == "js"
    nodes.map(node => generate_js(node))
    nodes.map(node => generate_llvm(node)))
