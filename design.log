# Do
- Multi paradigm for functional and structual
- Keep conceptual integrity

# Do not
- Hardware operations like IO, system call and directory memory access
- Inheritance
- Access control and reflection
- Unnecessary symbols like semi-corron, comma and parenthiese

# Policy
- Main purpose of Moa language is that accelarate web development
- Moa language consists core and library
- The core is pure, which does not provide any IO
- The library provides IO via its interface

# TODO
[ ] Syntax for named argument
    ft f: a.int b.int int
    fn f {a=0 b=0}: a + b
    fn g: f 1 2
    fn g: f a=1 b=2
    fn g: f b=2 a=1
    fn g: f b=2 1   # invalid syntax, named arguments should be last

# Todo
- Implement bootstrap to support core syntax by JavaScript
- Implement compiler to JavaScript by Moa langauge itself
- Implement some syntax sugger
- Implement odb module for persistant data
- Implement web module for frontend
- Implement web module for backend
- Implement web module for Mac, iOS and Android

# Pending
- Consider to add events type for UI

# Memo
https://www.swift.org/
https://www.haskell.org/onlinereport/syntax-iso.html
https://v2.ocaml.org/manual/expr.html
https://github.com/fsharp/fslang-design
