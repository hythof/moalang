# Do
- Multi paradigm for functional and structual
- Keep conceptual integrity

# Do not
- Hardware operations like IO, system call and directory memory access
- Inheritance
- Access control and reflection
- Unnecessary symbols like semi-corron, comma and parenthiese

# Policy
- Main purpose of Moa language is that accelarate web development
- Moa language consists core and library
- The core is pure, which does not provide any IO
- The library provides IO via its interface

# Implicit data type conversion
1 + u8(2)  # u8
a -> lazy[a] # ft assert a: lazy[a] a; fn assert lazy[exp]: if !exp(): print('assert failed: ' exp.string)

# Thinking
- Syntax for ternary operator
iif a >= 0 a (-1)

- Syntax for optional arguments
ft slice a: list[a] int omit[int] list[a]
fn slice a s:
| = a.slice s
| e = a.slice s e

- Syntax for variable arguments
ft iif a: omits[(lazy[bool],lazy[a])] lazy[a] a
fn iif conds f: conds.first(c: c.0())?.1().or(f)
fn iif omits[conds] f:
  for (cond, g) conds:
    return g()
  return f()

# Todo
- Implement bootstrap to support core syntax by JavaScript
- Implement compiler to JavaScript by Moa langauge itself
- Implement some syntax sugger
- Implement odb module for persistant data
- Implement web module for frontend
- Implement web module for backend
- Implement web module for Mac, iOS and Android

# Pending
- Consider to add events type for UI

# Memo
https://www.swift.org/
https://www.haskell.org/onlinereport/syntax-iso.html
https://v2.ocaml.org/manual/expr.html
https://github.com/fsharp/fslang-design
