# Do
- Multi paradigm for functional and structual
- Keep conceptual integrity

# Do not
- Hardware operations like IO, system call and directory memory access
- Inheritance
- Access control and reflection
- Unnecessary symbols like semi-corron, comma and parenthiese

# Policy
- Main purpose of Moa language is that accelarate web development
- Moa language consists core and library
- The core is pure, which does not provide any IO
- The library provides IO via its interface

# TODO
[ ] Implicit data type conversion
    1 + u8(2)              # u8
    a -> lazy[a] <-> fn[a] # ft f a: lazy[a] a; fn f f: print(f() f.string)
[ ] Syntax for ternary operator
    iif a >= 0 a (-1)
[ ] Syntax for default argument
    ft slice a: list[a] int iffy[int] list[a]
    fn slice xs start end=-1: ...
[ ] Syntax for optional argument
    ft slice a: list[a] int iffy[int] list[a]
    fn slice xs start:
    | = ...
    | end = ...
[ ] Syntax for named argument
    ft sendmail: string {from string, title string} _
    fn sendmail to {from, title}: ...
[ ] Syntax for variable argument
    ft map k v: many[tuple[k v]] dict[k v]  # accept zero or more arguments
    ft map k v: many1[tuple[k v]] dict[k v] # accept one or more arguments
[ ] Syntax for macro
    ft or a: bool lazy[a] lazy[a]
    fn or cond a b:
      if cond:
        return a()
      else:
        return b()

# Todo
- Implement bootstrap to support core syntax by JavaScript
- Implement compiler to JavaScript by Moa langauge itself
- Implement some syntax sugger
- Implement odb module for persistant data
- Implement web module for frontend
- Implement web module for backend
- Implement web module for Mac, iOS and Android

# Pending
- Consider to add events type for UI

# Memo
https://www.swift.org/
https://www.haskell.org/onlinereport/syntax-iso.html
https://v2.ocaml.org/manual/expr.html
https://github.com/fsharp/fslang-design
