dec _         : _ # bottom type
dec == a      : a a bool
dec != a      : a a bool
dec <  a      : a a bool
dec <= a      : a a bool
dec >  a      : a a bool
dec >= a      : a a bool
dec log a     : ... a a
dec assert a  : a a _!
dec iif a     : ...[bool a] a
dec guard     : bool _
dec if a      : bool a _
dec else a    : a _
dec throw a b : a b
dec catch a b : a (error[b] a) a # b as enum type covers possible exceptions, which is generated by the compiler
dec return a  : a a
dec match a b : a ...(a option[b]) b
dec for       : _
dec while     : bool _
dec continue  : _
dec break     : _

enum bool:
  true
  false
  !     : bool
  ||    : bool bool
  &&    : bool bool
  &&& a : option[a] option[a]
  ||| a : option[a] option[a]

interface _num a:
  _ b._num: b a
  +       : a a
  -       : a a
  *       : a a
  /       : a a
  %       : a a
  **      : a a
  abs     : a
  neg     : a

interface _int a:
  _num
  ~        : a
  &        : a a
  |        : a a
  ^        : a a
  <<       : a a
  >>       : a a
  int      : int
  float    : float
  char     : string
class i8 : _int
class i16: _int
class i32: _int
class i64: _int
class u8 : _int
class u16: _int
class u32: _int
class u64: _int
class int: _int

interface _float a:
  _num
  floor : int
  ceil  : int
  round : int
  isinf : bool
  isnan : bool
class f32: _float
class f64: _float
class float: _float

class string:
  _       : _ string # constructor
  size    : int
  concat  : string string
  slice   : int int string
  split   : string list[string]
  splitn  : string int list[string]
  index   : string option[int]
  rindex  : string option[int]
  replace : string string string
  starts  : string bool
  ends    : string bool
  has     : string bool
  trim    : string
  reverse : string
  repeat  : int string
  format  : ... string
  int     : option[int]
  float   : option[float]

class fn ...

class error a:
  message string
  stack   string
  data    a

enum option a:
  some a
  none
  &&&    : option[a] option[a]
  |||    : option[a] option[a]
  bool   : bool
  then b : (a b) option[b]
  or     : a a
  alt    : a

class tuple ...a:
  _        : ...a tuple[...a] # constructor
  []       : int a.nth
  []=      : int a.nth a.nth

class list a:
  _        : ...[a] list[a] # constructor
  []       : int a!
  size     : int
  slice    : int int list[a]
  repeat   : int list[a]
  concat   : list[a] list[a]
  map b    : (a b) list[b]
  fmap b   : (a list[b]) list[b]
  keep     : (a bool) list[a]
  all      : (a bool) bool
  any      : (a bool) bool
  fold b   : (b a b) b b
  scan b   : (b a b) b list[b]
  find     : (a bool) option[a]
  index    : (a bool) option[int]
  rindex   : (a bool) option[int]
  zip b    : list[b] list[tuple[a b]]
  sort     : (a a bool) list[a]
  reverse  : list[a]
  join     : string string
  has      : a bool
  min      : a
  max      : a
  minmax   : tuple[a a]
  unique   : set[a]
  []=      : int a a!  # modify in-place
  push     : a a       # modify and expand
  pop      : a!        # modify and shurink

class set a:
  _    : ...[a] set[a] # constructor
  -    : set[a] set[a]
  |    : set[a] set[a]
  &    : set[a] set[a]
  ^    : set[a] set[a]
  size : int
  has  : a bool
  list : list[a]
  add  : a bool  # modify in-place
  rid  : a bool  # modify in-place

class dict k v:
  _      : ...[k v] dict[k v] # constructor
  []     : k option[v]
  size   : int
  has    : k bool
  keys   : list[k]
  values : list[v]
  items  : list[tuple[k v]]
  concat : dict[k v] dict[k v]
  []=    : k v v       # modify and expand
  gset   : k v v       # modify and expand
  rid    : k option[v] # modify and shrink
