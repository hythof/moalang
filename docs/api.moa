# Syntax sugars
# x[a]     -> x.get(a)
# x[a] = b -> x.set(a b)
# x.0      -> x.gets(0)
# x.0 = a  -> x.sets(0 a)

extern _

extern:
  log a      : ... a a
  assert a   : a a _!
  iif a      : ...[bool a] a
  if a b     : a b _
  else a     : a _
  switch a b : a ... b
  throw a b  : string a? b
  catch a b  : a fn[error[b] a] a
  return a   : a a
  # for a    : _id a _
  while a    : bool a _
  continue   : _
  break      : _

interface _ a: # for all classes and enums including user defined
  .zero : a    # can not be override
  ==    : a bool
  !=    : a bool
  <     : a bool
  <=    : a bool
  >     : a bool
  >=    : a bool

enum bool:
  true
  false
  !  : bool
  || : bool bool
  && : bool bool

interface _num a:
  +     : a a
  -     : a a
  *     : a a
  /     : a a
  %     : a a
  **    : a a
  abs   : a
  neg   : a
  i8    : i8
  i16   : i16
  i32   : i32
  i64   : i64
  u8    : u8
  u16   : u16
  u32   : u32
  u64   : u64
  int   : int
  f32   : f32
  f64   : f64
  float : float

interface _int a:
  _num
  char  : string
  float : float
  ~     : a
  &     : a a
  |     : a a
  ^     : a a
  <<    : a a
  >>    : a a
extern i8 : _int
extern i16: _int
extern i32: _int
extern i64: _int
extern u8 : _int
extern u16: _int
extern u32: _int
extern u64: _int
extern int: _int

interface _float a:
  _num
  .inf  : a
  .nan  : a
  floor : int
  ceil  : int
  round : int
extern f32: _float
extern f64: _float
extern float: _float

extern string:
  .new    : _ string
  size    : int
  concat  : string string
  reverse : string
  slice   : int int? int? string
  split   : string list[string]
  splitn  : string int list[string]
  index   : string option[int]
  rindex  : string option[int]
  replace : string string string
  trim    : string
  starts  : string bool
  ends    : string bool
  has     : string bool
  repeat  : int string
  i8      : option[i8]
  i16     : option[i16]
  i32     : option[i32]
  i64     : option[i64]
  u8      : option[u8]
  u16     : option[u16]
  u32     : option[u32]
  u64     : option[u64]
  int     : option[int]
  f32     : option[f32]
  f64     : option[f64]
  float   : option[float]

extern fn ...

class error a:
  message string
  stack   string
  data    a

enum option a:
  some a
  none
  |       : option[a] option[a]
  then b  : fn[a b] option[b]
  alt     : a a

extern tuple ...a:
  gets n : a[n]
  sets n : a[n] a[n]

extern list a:
  get      : int a!
  set      : int a a!       # modify self
  size     : int
  concat   : list[a] list[a]
  slice    : int int? int? list[a]
  map b    : fn[a int? b] list[b]
  fmap b   : fn[a int? list[b]] list[b]
  keep     : fn[a int? bool] list[a]
  all      : fn[a int? bool] bool
  any      : fn[a int? bool) bool
  sort     : fn[a a bool]? list[a]
  reverse  : list[a]
  zip b    : list[b] list[tuple[a b]]
  fold b   : b fn[a b b] b
  find     : fn[a bool] option[a]
  index    : fn[a bool] option[a]
  rindex   : fn[a bool] option[a]
  join     : string string
  has      : a bool
  min      : a
  max      : a
  minmax   : tuple[a a]
  repeat   : int list[a]
  unique   : set[a]
  push     : a a             # modify self
  insert   : int a a!        # modify self
  pop      : a!              # modify self
  remove   : int a!          # modify self
  discard  : int option[a]   # modify self
  extend   : list[a] list[a] # modify self

extern set a:
  -     : set[a] set[a]
  |     : set[a] set[a]
  &     : set[a] set[a]
  ^     : set[a] set[a]
  size  : int
  has   : a bool
  add   : a bool  # modify self
  rid   : a bool  # modify self
  list  : list[a]

extern dict k v:
  |      : dict[k v] dict[k v]
  get    : k v!
  set    : k v v       # modify self
  size   : int
  has    : k bool
  rid    : k option[v] # modify self
  keys   : list[k]
  values : list[v]
  items  : list[tuple[k v]]
  concat : dict[k v] dict[k v]
