dec _        : _ # bottom type
dec == a: a a bool
dec != a: a a bool
dec <  a: a a bool
dec <= a: a a bool
dec >  a: a a bool
dec >= a: a a bool
dec log a      : ... a a
dec assert a   : a a _!
dec iif a      : ...[bool a] a
dec guard      : bool _
dec if a       : bool a _
dec else a     : a _
dec throw a b  : a b
dec catch a b  : a fn[error[b] a] a
dec return a   : a a
dec match a b  : a ...[bool b] b
dec for        : _
dec while      : bool _
dec continue   : _
dec break      : _

enum bool:
  true
  false
  !     : bool
  ||    : bool bool
  &&    : bool bool
  &&& a : option[a]
  ||| a : option[a]

interface _num a:
  +     : a a
  -     : a a
  *     : a a
  /     : a a
  %     : a a
  **    : a a
  abs   : a
  neg   : a

interface _int a:
  _num
  ~     : a
  &     : a a
  |     : a a
  ^     : a a
  <<    : a a
  >>    : a a
  i8    : i8
  i16   : i16
  i32   : i32
  i64   : i64
  u8    : u8
  u16   : u16
  u32   : u32
  u64   : u64
  int   : int
  f32   : f32
  f64   : f64
  float : float
  char  : string
extern i8 : _int
extern i16: _int
extern i32: _int
extern i64: _int
extern u8 : _int
extern u16: _int
extern u32: _int
extern u64: _int
extern int: _int

interface _float a:
  _num
  floor : int
  ceil  : int
  round : int
  isinf : bool
  isnan : bool
extern f32: _float
extern f64: _float
extern float: _float

extern string:
  _       : _ string # constructor
  size    : int
  concat  : string string
  slice   : int int string
  split   : string list[string]
  splitn  : string int list[string]
  index   : string option[int]
  rindex  : string option[int]
  replace : string string string
  starts  : string bool
  ends    : string bool
  has     : string bool
  trim    : string
  reverse : string
  repeat  : int string
  format  : ... string
  int     : option[int]
  float   : option[float]

extern fn ...

class error a:
  message string
  stack   string
  data    a

enum option a:
  some a
  none
  bool   : bool
  then b : fn[a b] option[b]
  or     : a a
  alt    : a

extern tuple ...a:
  _        : ...a tuple[...a] # constructor
  nget     : int a.nth
  nset     : int a.nth a.nth

extern list a:
  _        : ...[a] list[a] # constructor
  get      : int a!
  nget     : int a!
  nset     : int a! a!
  size     : int
  slice    : int int list[a]
  repeat   : int list[a]
  concat   : list[a] list[a]
  map b    : fn[a b] list[b]
  fmap b   : fn[a list[b]] list[b]
  keep     : fn[a bool] list[a]
  all      : fn[a bool] bool
  any      : fn[a bool) bool
  fold b   : fn[b a b] b b
  scan b   : fn[b a b] b list[b]
  find     : fn[a bool] option[a]
  index    : fn[a bool] option[int]
  rindex   : fn[a bool] option[int]
  zip b    : list[b] list[tuple[a b]]
  sort     : fn[a a bool] list[a]
  reverse  : list[a]
  join     : string string
  has      : a bool
  min      : a
  max      : a
  minmax   : tuple[a a]
  repeat   : int list[a]
  unique   : set[a]
  set      : int a a!  # modify in-place
  push     : a a       # modify and expand
  pop      : a!        # modify and shurink

extern set a:
  _    : ...[a] set[a] # constructor
  -    : set[a] set[a]
  |    : set[a] set[a]
  &    : set[a] set[a]
  ^    : set[a] set[a]
  size : int
  has  : a bool
  list : list[a]
  add  : a bool  # modify in-place
  rid  : a bool  # modify in-place

extern dict k v:
  _      : ...[k v] dict[k v] # constructor
  get    : k option[v]
  size   : int
  has    : k bool
  keys   : list[k]
  values : list[v]
  items  : list[tuple[k v]]
  concat : dict[k v] dict[k v]
  set    : k v v       # modify and expand
  gset   : k v v       # modify and expand
  rid    : k option[v] # modify and shrink
