- main: io moa

main: int!
main =
  src <- io.stdin.string
  ret <- moa.run(src)
  io.write(ret)
  0

- moa: _

run: string string?
run src =
  node <- parser.parse(src)
  evaluator.eval(node)

ast:
| int int
| op2 op string, left ast, right ast

parse: string ast!
parse src = parse_top:
  parse_top: ast!
  parse_top = many1(parse_def)

  parse_def: ast!
  parse_def =
    id <- read_id
    read_string("=")
    body <- parse_exp
    def(id body)

  parse_exp: ast!
  parse_exp =
    l <- parse_unit
    op <- read_op
    r <- parse_exp
    ast.op2(op l r)

  parse_unit: ast!
  parse_unit = parse_int.or(parse_ref)

  parse_int: ast!
  parse_int =
    x <- many1(p.satisfy(num.has))
    ast.int(x.to_int)

  - private
  pos 0
  satisfy f =
    c <- src(pos)
    f(c) || err("char: $c, checker: $f.name, pos: $p.pos")
    p.pos += 1
    return(c)
  read_id =
    x <- one(az)
    xs <- many(azn)
    x ++ xs.join
  read_op = one("+-*/".to_a.has)
  read_string s = s == src.slice(pos s.length)
  num = range("0" "9")
  az = range("a" "z" "A" "Z")
  azn = az ++ num
  many1 f = f() ++ many(f)
  many f = rec([]):
    rec acc =
      v <- f()
      | _ = return acc
      rec(acc ++ v)

eval: [string ast] ast!
eval env = do:
  do =
    main <- env.find("main")
    apply(main).to_string
  apply node = node
  | ast.int = node
  | ast.op2 = operate(node.op node.left node.rigth)
  | ast.ref = apply_ref(node)
  apply_ref node =
    v <- env.find(node)
    apply(v)
  operate op left right = do:
    do =
      lv <- apply(left)
      rv <- apply(right)
      lv, rv
      | ast.int, ast.int = op2(lv rv)
      | err("Failed to op2" op lv rv)
    op2 l r = op
    | "+" = ast.int(l + r)
    | "-" = ast.int(l - r)
    | "*" = ast.int(l * r)
    | "/" = ast.int(l / r)
    | err("unknown operator $op")
