# Features
[ ] num, int, float
[ ] string
[ ] lambda
[ ] list(t)
[ ] dict(k v)
[ ] set(t)
[ ] tuple
[ ] time
[ ] struct
[ ] algebric data type
[ ] binary operators
[ ] regexp, matchdata
[ ] fail(t), catch a b :: a b
[ ] use io now random

# Commercial features
[ ] use mrpc define

# Next features
[ ] bytes
[ ] use data ref weakref copy deepcopy zlib gzip bz2 zip tar json md5 hmac base64 hex
[ ] use moa parse generate

# Core syntax
top; unit+
unit:
| "(" top ")"
| "[^"]+"
| `[^"]+`
| !
| [+-/*%<>!=|&]+
| [^ ]+

Syntax sugars
- f(...)      # (f ...)
- o.m         # (. o m)
- a b         # (a b)
- a = b       # (= a () b)
- a b = c     # (c = a (b) c)
- a op2 b     # (op2 a b)
- op1 a       # (op1 a)
- a b: c      # (: (a b) (c))
- a b:
  c
  d e         # (: (a b) (c (d e)))

Example
inc n = n + 1 # (= inc (n) (+ n 1))
main =
  x = 1
  match x:
    case 1: "one"
    case _: "others"
  # (= main () ((= x 1) (: match x ((: caes 1 "one") (: case _ "others))))

Syntax sugar ides
- [...]     -> list(...)
- {k:v ...} -> dict("k" v)
