- Design for error handling
[x] idt ::= id ("::" type)
[x] type :: = id ("{" id type+ (";" id type+)* "}")? | "(" type+ ")"
[x] "throw" exp+
[x] "try" exp+ ":" (br "catch" type id: exp)+

- Design for no argument function
[x] "fn f: 1" # "(int)"
[x] "let v 1" # "int"

- Design something looks like statements
[x] "for" int ":" ...  | "for" id int int? int? ":" ...
[x] "while" exp ":" ...
[x] "if" exp ":" ... (br "else if" exp ":" ...)* ("else:" ...)?
[x] "continue" | "break" | "yield" exp | "yeild break"

- Design how to infer type of property access
[x] f x = x.inc (x.val + 1) # f a b{inc num a; val num} :: b a

- Shortcut for string template
[x] $"This is {name}"
